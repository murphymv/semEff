[{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://murphymv.github.io/semEff/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":[]},{"path":"https://murphymv.github.io/semEff/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark V. Murphy. Author, maintainer.","code":""},{"path":"https://murphymv.github.io/semEff/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Murphy MV (2024). semEff: Automatic Calculation Effects Piecewise Structural Equation Models. R package version 0.7.2, https://github.com/murphymv/semEff, https://buymeacoffee.com/murphymv, https://murphymv.github.io/semEff/.","code":"@Manual{,   title = {semEff: Automatic Calculation of Effects for Piecewise Structural Equation Models},   author = {Mark V. Murphy},   year = {2024},   note = {R package version 0.7.2, https://github.com/murphymv/semEff,     https://buymeacoffee.com/murphymv},   url = {https://murphymv.github.io/semEff/}, }"},{"path":"https://murphymv.github.io/semEff/index.html","id":"semeff","dir":"","previous_headings":"","what":"Automatic Calculation of Effects for Piecewise Structural Equation Models","title":"Automatic Calculation of Effects for Piecewise Structural Equation Models","text":"semEff provides functionality automatically calculate direct, indirect, total effects ‘piecewise’ structural equation models, comprising lists fitted models representing structured equations (Lefcheck, 2016; Shipley, 2000, 2009). Confidence intervals provided via bootstrapping. Currently supported model classes \"lm\", \"glm\", \"lmerMod\", \"glmerMod\", \"lmerModLmerTest\", \"gls\", \"betareg\".","code":""},{"path":"https://murphymv.github.io/semEff/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automatic Calculation of Effects for Piecewise Structural Equation Models","text":"can install released version semEff CRAN : development version GitHub :","code":"install.packages(\"semEff\") devtools::install_github(\"murphymv/semEff@dev\")"},{"path":"https://murphymv.github.io/semEff/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Automatic Calculation of Effects for Piecewise Structural Equation Models","text":"primary function semEff(), returns object class \"semEff\" associated print() summary() methods. Everything can technically accomplished single call semEff(); however, since bootstrapping employed generate resamples confidence intervals (via bootEff()), usually preferable save estimates separately prior calling semEff() – allowing flexibility saving time /recalling function.","code":""},{"path":"https://murphymv.github.io/semEff/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Automatic Calculation of Effects for Piecewise Structural Equation Models","text":"Package functions well-documented include short examples. addition, see following vignettes longer demonstrations: Analysing direct vs. indirect effects landscape location plant species richness Predicting plotting indirect effects degree days bud burst tree growth","code":""},{"path":"https://murphymv.github.io/semEff/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Automatic Calculation of Effects for Piecewise Structural Equation Models","text":"Lefcheck, J. S. (2016). piecewiseSEM: Piecewise structural equation modelling R ecology, evolution, systematics. Methods Ecology Evolution, 7(5), 573–579. doi:10/f8s8rb Shipley, B. (2000). New Inferential Test Path Models Based Directed Acyclic Graphs. Structural Equation Modeling: Multidisciplinary Journal, 7(2), 206–218. doi:10/cqm32d Shipley, B. (2009). Confirmatory path analysis generalized multilevel context. Ecology, 90(2), 363–368. doi:10/bqd43d","code":""},{"path":"https://murphymv.github.io/semEff/reference/Object.Type.html","id":null,"dir":"Reference","previous_headings":"","what":"Object Types — Object.Type","title":"Object Types — Object.Type","text":"Functions determine 'type' R object using classes. Intended largely convenience internal use.","code":""},{"path":"https://murphymv.github.io/semEff/reference/Object.Type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object Types — Object.Type","text":"","code":"isList(x)  isBoot(x)  isMod(x)  isGlm(x)  isMer(x)  isGls(x)  isBet(x)"},{"path":"https://murphymv.github.io/semEff/reference/Object.Type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object Types — Object.Type","text":"x R object.","code":""},{"path":"https://murphymv.github.io/semEff/reference/Object.Type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object Types — Object.Type","text":"logical value.","code":""},{"path":"https://murphymv.github.io/semEff/reference/Object.Type.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Object Types — Object.Type","text":"isList(): object list (class \"list\" )? isBoot(): object boot object (class \"boot\")? isMod(): object fitted model? isGlm(): object generalised linear model (.e. uses link function)? isMer(): object mixed model (class \"merMod\")? isGls(): object generalised least squares model (class \"gls\")? isBet(): object beta regression model (class \"betareg\")?","code":""},{"path":"https://murphymv.github.io/semEff/reference/Param.Type.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Types — Param.Type","title":"Parameter Types — Param.Type","text":"Functions determine presence/absence certain model parameter types using names. Intended largely convenience internal use.","code":""},{"path":"https://murphymv.github.io/semEff/reference/Param.Type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Types — Param.Type","text":"","code":"isInt(x)  isInx(x)  isPhi(x)  isR2(x)  isRaw(x)"},{"path":"https://murphymv.github.io/semEff/reference/Param.Type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Types — Param.Type","text":"x character vector parameter names (e.g. names coefficients coef() stdEff()).","code":""},{"path":"https://murphymv.github.io/semEff/reference/Param.Type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Types — Param.Type","text":"logical vector length x.","code":""},{"path":"https://murphymv.github.io/semEff/reference/Param.Type.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Parameter Types — Param.Type","text":"isInt(): parameter intercept? isInx(): parameter variable interaction (product term)? isPhi(): parameter beta regression precision coefficient? isR2(): parameter R-squared value? isRaw(): parameter raw (unstandardised) coefficient?","code":""},{"path":"https://murphymv.github.io/semEff/reference/R2.html","id":null,"dir":"Reference","previous_headings":"","what":"R-squared — R2","title":"R-squared — R2","text":"Calculate (Pseudo) R-squared fitted model, defined squared multiple correlation observed fitted values response variable. 'Adjusted' 'Predicted' versions also calculated (see Details).","code":""},{"path":"https://murphymv.github.io/semEff/reference/R2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R-squared — R2","text":"","code":"R2(   mod,   data = NULL,   adj = TRUE,   pred = TRUE,   offset = FALSE,   re.form = NULL,   type = c(\"pearson\", \"spearman\"),   adj.type = c(\"olkin-pratt\", \"ezekiel\"),   positive.only = TRUE,   env = NULL )"},{"path":"https://murphymv.github.io/semEff/reference/R2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R-squared — R2","text":"mod fitted model object, list nested list objects. data optional dataset, used first refit model(s). adj, pred Logical. TRUE (default), adjusted /predicted R-squared also returned (latter available model types). offset Logical. TRUE, include model offset(s) calculations (.e. response variable fitted values). re.form mixed models class \"merMod\", formula random effects condition generating fitted values used calculation R-squared. Defaults NULL, meaning random effects included. See lme4:::predict.merMod() specification details. type type correlation coefficient use. Can \"pearson\" (default) \"spearman\". adj.type type adjusted R-squared estimator use. Can \"olkin-pratt\" (default) \"ezekiel\". See Details. positive.Logical, whether return positive values R-squared (negative values replaced zero). env Environment look model data (none supplied). Defaults formula() environment.","code":""},{"path":"https://murphymv.github.io/semEff/reference/R2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R-squared — R2","text":"numeric vector R-squared value(s), array, list vectors/arrays, nested list.","code":""},{"path":"https://murphymv.github.io/semEff/reference/R2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R-squared — R2","text":"Various approaches calculation goodness fit measure GLMs analogous R-squared ordinary linear model proposed. Generally termed 'pseudo R-squared' measures, include variance-based, likelihood-based, distribution-specific approaches. however, straightforward definition used, can applied model fitted values response variable generated: R-squared calculated squared (weighted) correlation observed fitted values response (original units). simply squared version correlation measure advocated Zheng & Agresti (2000), intuitive measure goodness fit describing predictive power model. measure depend specific error distribution model estimating procedure, also generally comparable across many different types model (Kvalseth, 1985). case ordinary linear model, measure exactly equal traditional R-squared based sums squares. adj = TRUE (default), 'adjusted' R-squared value also returned, provides estimate population – opposed sample – R-squared. achieved via analytical formula adjusts R-squared using 'degrees freedom' model (.e. ratio observations parameters), helping counter multiple R-squared's positive bias guard overfitting model noise original sample. default, calculated via exact 'Olkin-Pratt' estimator, shown recent simulations optimal unbiased population R-squared estimator across range estimators specification scenarios (Karch, 2020), thus good general first choice, even smaller sample sizes. Setting adj.type = \"ezekiel\" however use simpler common 'Ezekiel' formula, can appropriate minimising mean squared error (MSE) estimate important strict unbiasedness (Hittner, 2019; Karch, 2020). pred = TRUE (default), 'predicted' R-squared also returned, calculated via formula R-squared using cross-validated, rather original, fitted values. obtained dividing model residuals (response scale) complement observation leverages (diagonals hat matrix), subtracting inflated 'predicted' residuals response variable. essentially short cut obtaining '--sample' predictions, normally arising via 'leave-one-' cross-validation procedure (exactly equal GLMs). resulting R-squared estimate R-squared result model fit new data, lower original – likely also adjusted – R-squared, highlighting loss explanatory power due sample noise. Predicted R-squared may powerful general indicator overfitting adjusted R-squared, provides true --sample test. measure variant existing one, calculated substituting 'PRESS' statistic, .e. sum squares predicted residuals (Allen, 1974), residual sum squares classic R-squared formula. calculated GLMMs, interpretation hat matrix reliable (see lme4:::hatvalues.merMod()). models fitted one offsets, removed default response variable fitted values prior calculations. Thus R-squared measure goodness fit predictors estimated, rather fixed, coefficients. likely intended behaviour circumstances, though users wish include variation due offset(s) can set offset = TRUE. mixed models, function , default, calculate R-squared measures using fitted values incorporating fixed random effects, thus encompassing variation captured model. equivalent 'conditional' R-squared Nakagawa et al. (2017) (though see reference advanced approach R-squared mixed models). include random effects, simply set appropriate formula using argument re.form, passed directly lme4:::predict.merMod(). re.form = NA, R-squared calculated fixed effects , .e. 'marginal' R-squared Nakagawa et al. (2017). R-squared calculated squared correlation, type correlation coefficient can also specified. Setting \"spearman\" may desirable cases, relationship response fitted values necessarily bivariate normal linear, correlation ranks may informative /general. purely monotonic R-squared can also considered useful goodness fit measure, may appropriate comparisons GLMs ordinary linear models scenarios. R-squared values produced function default range 0-1, meaning negative values arising calculations converted zero. Negative values essentially mean fit 'worse' null expectation relationship variables, can difficult interpret practice case usually occurs rare situations, intercept suppressed low value R-squared adjusted downwards via analytic estimator. values also 'impossible' practice, given R-squared strictly positive measure (generally known). Hence, simplicity ease interpretation, values less zero presented complete lack model fit. also recommended Shieh (2008), shows adjusted R-squared 'positive-part' estimators lower MSE estimating population R-squared (though higher bias). allow return negative values however, set positive.= FALSE. may desirable simulation purposes, /strict unbiasedness prioritised.","code":""},{"path":"https://murphymv.github.io/semEff/reference/R2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"R-squared — R2","text":"Caution must exercised interpreting values pseudo R-squared measure calculated GLM mixed model (including produced function), measures hold properties R-squared ordinary linear model may always behave expected. Care must also taken comparing measures equivalents ordinary linear models, particularly adjusted predicted versions, assumptions /calculations may generalise well. said, value standardised R-squared measures even 'rough' model fit assessment comparison may outweigh reservations, adjusted predicted versions particular may aid user diagnosing preventing overfitting. , however, replace measures AIC BIC formally comparing /ranking competing models fit response variable.","code":""},{"path":"https://murphymv.github.io/semEff/reference/R2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"R-squared — R2","text":"Allen, D. M. (1974). Relationship Variable Selection Data Augmentation Method Prediction. Technometrics, 16(1), 125-127. doi:10/gfgv57 Hittner, J. B. (2019). Ezekiel’s classic estimator population squared multiple correlation coefficient: Monte Carlo-based extensions refinements. Journal General Psychology, 147(3), 213–227. doi:10/gk53wb Karch, J. (2020). Improving Adjusted R-Squared. Collabra: Psychology, 6(1). doi:10/gkgk2v Kvalseth, T. O. (1985). Cautionary Note R2. American Statistician, 39(4), 279-285. doi:10/b8b782 Nakagawa, S., Johnson, P. C. D., & Schielzeth, H. (2017). coefficient determination R2 intra-class correlation coefficient generalized linear mixed-effects models revisited expanded. Journal Royal Society Interface, 14(134). doi:10/gddpnq Shieh, G. (2008). Improved Shrinkage Estimation Squared Multiple Correlation Coefficient Squared Cross-Validity Coefficient. Organizational Research Methods, 11(2), 387–407. doi:10/bcwqf3 Zheng, B., & Agresti, . (2000). Summarizing predictive power generalized linear model. Statistics Medicine, 19(13), 1771-1781. doi:10/db7rfv","code":""},{"path":"https://murphymv.github.io/semEff/reference/R2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R-squared — R2","text":"","code":"# Pseudo R-squared for mixed models R2(shipley.sem)  # fixed + random ('conditional') #>                       DD      Date    Growth      Live #> R.squared      0.7080083 0.9855557 0.7938367 0.2668652 #> R.squared.adj  0.7074791 0.9855351 0.7934879 0.2655971 #> R.squared.pred 0.6835636 0.9820241 0.7552854        NA R2(shipley.sem, re.form = ~ (1 | tree))  # fixed + 'tree' #>                       DD      Date    Growth      Live #> R.squared      0.5305163 0.8491536 0.6068561 0.2453019 #> R.squared.adj  0.5295483 0.8489101 0.6060877 0.2439737 #> R.squared.pred 0.4898536 0.6831439 0.5012969        NA R2(shipley.sem, re.form = ~ (1 | site))  # fixed + 'site' #>                       DD      Date    Growth      Live #> R.squared      0.6839237 0.6925661 0.3081469 0.2016339 #> R.squared.adj  0.6833402 0.6920022 0.3065040 0.2001797 #> R.squared.pred 0.6567506 0.2541820 0.1153087        NA R2(shipley.sem, re.form = NA)  # fixed only ('marginal') #>                       DD      Date     Growth      Live #> R.squared      0.5012513 0.4250445 0.04814953 0.1834597 #> R.squared.adj  0.5002024 0.4237737 0.04554043 0.1819516 #> R.squared.pred 0.4578167 0.0801710 0.00000000        NA R2(shipley.sem, re.form = NA, type = \"spearman\")  # using Spearman's Rho #>                       DD      Date      Growth       Live #> R.squared      0.4043303 0.3919543 0.048572025 0.04724129 #> R.squared.adj  0.4029963 0.3905821 0.045964645 0.04529886 #> R.squared.pred 0.3008997 0.2992427 0.001204466         NA  # Predicted R-squared: compare cross-validated predictions calculated/ # approximated via the hat matrix to standard method (leave-one-out)  # Fit test models using Shipley data – compare lm vs glm d <- na.omit(shipley) m <- lm(Live ~ Date + DD + lat, d) # m <- glm(Live ~ Date + DD + lat, binomial, d)  # Manual CV predictions (leave-one-out) cvf1 <- sapply(1:nrow(d), function(i) {   m.ni <- update(m, data = d[-i, ])   predict(m.ni, d[i, ], type = \"response\") })  # Short-cut via the hat matrix y <- getY(m) f <- fitted(m) cvf2 <- y - (y - f) / (1 - hatvalues(m))  # Compare predictions (not exactly equal for GLMs) all.equal(cvf1, cvf2) #> [1] TRUE # lm: TRUE; glm: \"Mean relative difference: 1.977725e-06\" cor(cvf1, cvf2) #> [1] 1 # lm: 1; glm: 0.9999987  # NOTE: comparison not tested here for mixed models, as hierarchical data can # complicate the choice of an appropriate leave-one-out procedure. However, # there is no obvious reason why use of the leverage values (diagonals of the # hat matrix) to estimate CV predictions shouldn't generalise, roughly, to # the mixed model case (at least for LMMs). In any case, users should # exercise the appropriate caution in interpretation."},{"path":"https://murphymv.github.io/semEff/reference/RVIF.html","id":null,"dir":"Reference","previous_headings":"","what":"Root Variance Inflation Factors — RVIF","title":"Root Variance Inflation Factors — RVIF","text":"Calculate root variance inflation factors (RVIF) terms fitted model(s), .e. square root (generalised) VIFs.","code":""},{"path":"https://murphymv.github.io/semEff/reference/RVIF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Root Variance Inflation Factors — RVIF","text":"","code":"RVIF(...)"},{"path":"https://murphymv.github.io/semEff/reference/RVIF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Root Variance Inflation Factors — RVIF","text":"... Arguments VIF().","code":""},{"path":"https://murphymv.github.io/semEff/reference/RVIF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Root Variance Inflation Factors — RVIF","text":"numeric vector RVIFs, array, list vectors/arrays, nested list.","code":""},{"path":"https://murphymv.github.io/semEff/reference/RVIF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Root Variance Inflation Factors — RVIF","text":"RVIFs quantify inflation estimate standard errors due multicollinearity among predictors, also estimates compared 'unique' (residualised) effects. RVIFs may often practical VIFs assessing multicollinearity, relating directly parameters interest.","code":""},{"path":"https://murphymv.github.io/semEff/reference/VIF.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalised Variance Inflation Factors — VIF","title":"Generalised Variance Inflation Factors — VIF","text":"Calculate generalised variance inflation factors terms fitted model(s) via variance-covariance matrix coefficients.","code":""},{"path":"https://murphymv.github.io/semEff/reference/VIF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalised Variance Inflation Factors — VIF","text":"","code":"VIF(mod, data = NULL, env = NULL)"},{"path":"https://murphymv.github.io/semEff/reference/VIF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalised Variance Inflation Factors — VIF","text":"mod fitted model object, list nested list objects. data optional dataset, used first refit model(s). env Environment look model data (none supplied). Defaults formula() environment.","code":""},{"path":"https://murphymv.github.io/semEff/reference/VIF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalised Variance Inflation Factors — VIF","text":"numeric vector VIFs, array, list vectors/arrays, nested list.","code":""},{"path":"https://murphymv.github.io/semEff/reference/VIF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalised Variance Inflation Factors — VIF","text":"VIF() calculates generalised variance inflation factors (GVIF) described Fox & Monette (1992), also implemented car::vif(). However, whereas car::vif() returns GVIF GVIF^(1/(2*Df)) values, VIF() simply returns squared result latter measure, equals standard VIF single-coefficient terms equivalent measure multi-coefficient terms (e.g. categorical polynomial). Also, car::vif() returns values per model term (.e. predictor variable), VIF() returns values per coefficient, meaning value returned per coefficient multi-coefficient terms. Finally, NA returned terms estimated model (e.g. aliased).","code":""},{"path":"https://murphymv.github.io/semEff/reference/VIF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalised Variance Inflation Factors — VIF","text":"Fox, J., & Monette, G. (1992). Generalized Collinearity Diagnostics. Journal American Statistical Association, 87, 178-183. doi:10/dm9wbw","code":""},{"path":"https://murphymv.github.io/semEff/reference/VIF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalised Variance Inflation Factors — VIF","text":"","code":"# Model with two correlated terms m <- shipley.growth[[3]] VIF(m)  # Date & DD somewhat correlated #>     Date       DD      lat  #> 6.062838 6.077410 1.012151  VIF(update(m, . ~ . - DD))  # drop DD #>     Date      lat  #> 1.009793 1.009793   # Model with different types of predictor (some multi-coefficient terms) d <- data.frame(   y = rnorm(100),   x1 = rnorm(100),   x2 = as.factor(rep(c(\"a\", \"b\", \"c\", \"d\"), each = 25)),   x3 = rep(1, 100) ) m <- lm(y ~ poly(x1, 2) + x2 + x3, data = d) VIF(m) #> poly(x1, 2)1 poly(x1, 2)2          x2b          x2c          x2d           x3  #>     1.036899     1.036899     1.024451     1.024451     1.024451           NA"},{"path":"https://murphymv.github.io/semEff/reference/avgEst.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Average of Model Estimates — avgEst","title":"Weighted Average of Model Estimates — avgEst","text":"Calculate weighted average model estimates (e.g. effects, fitted values, residuals) set models.","code":""},{"path":"https://murphymv.github.io/semEff/reference/avgEst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Average of Model Estimates — avgEst","text":"","code":"avgEst(est, weights = \"equal\", est.names = NULL)"},{"path":"https://murphymv.github.io/semEff/reference/avgEst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Average of Model Estimates — avgEst","text":"est list nested list numeric vectors, comprising model estimates. latter case, correspond estimates candidate models set different response variables. weights optional numeric vector weights use model averaging, named list vectors. former supplied est list, latter nested list (matching list names). weights = \"equal\" (default), simple average calculated instead. est.names optional vector names used extract /sort estimates output.","code":""},{"path":"https://murphymv.github.io/semEff/reference/avgEst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Average of Model Estimates — avgEst","text":"numeric vector model-averaged estimates, list vectors.","code":""},{"path":"https://murphymv.github.io/semEff/reference/avgEst.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted Average of Model Estimates — avgEst","text":"function can used calculate weighted average model estimates effects, fitted values, residuals, models typically competing candidate models fit response variable. Weights typically 'weight evidence' type metric Akaike model weights (Burnham & Anderson, 2002; Burnham et al., 2011), can conveniently calculated R using packages MuMIn AICcmodavg. However, numeric weights sort can used. none supplied, simple average calculated instead. Averaging performed via 'full'/'zero' rather 'subset'/'conditional'/'natural' method, meaning zero substituted estimates 'missing' parameters (e.g. effects) prior calculations. provides form shrinkage thus reduces estimate bias (Burnham & Anderson, 2002; Grueber et al., 2011).","code":""},{"path":"https://murphymv.github.io/semEff/reference/avgEst.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Weighted Average of Model Estimates — avgEst","text":"Burnham, K. P., & Anderson, D. R. (2002). Model Selection Multimodel Inference: Practical Information-Theoretic Approach (2nd ed.). Springer-Verlag. https://link.springer.com/book/10.1007/b97636 Burnham, K. P., Anderson, D. R., & Huyvaert, K. P. (2011). AIC model selection multimodel inference behavioral ecology: background, observations, comparisons. Behavioral Ecology Sociobiology, 65(1), 23-35. doi:10/c4mrns Dormann, C. F., Calabrese, J. M., Guillera‐Arroita, G., Matechou, E., Bahn, V., Bartoń, K., Beale, C. M., Ciuti, S., Elith, J., Gerstner, K., Guelat, J., Keil, P., Lahoz‐Monfort, J. J., Pollock, L. J., Reineking, B., Roberts, D. R., Schröder, B., Thuiller, W., Warton, D. ., … Hartig, F. (2018). Model averaging ecology: review Bayesian, information-theoretic, tactical approaches predictive inference. Ecological Monographs, 88(4), 485–504. doi:10/gfgwrv Grueber, C. E., Nakagawa, S., Laws, R. J., & Jamieson, . G. (2011). Multimodel inference ecology evolution: challenges solutions. Journal Evolutionary Biology, 24(4), 699-711. doi:10/b7b5d4 Walker, J. . (2019). Model-averaged regression coefficients straightforward interpretation using causal conditioning. BioRxiv, 133785. doi:10/c8zt","code":""},{"path":"https://murphymv.github.io/semEff/reference/avgEst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Average of Model Estimates — avgEst","text":"","code":"# Model-averaged effects (coefficients) m <- shipley.growth  # candidate models e <- lapply(m, function(i) coef(summary(i))[, 1]) avgEst(e) #>  (Intercept)           DD         Date          lat  #> 15.135291812 -0.006522619  0.290608333 -0.033495883   # Using weights w <- runif(length(e), 0, 1) avgEst(e, w) #>  (Intercept)           DD         Date          lat  #> 16.491775527 -0.008215944  0.288076307 -0.045966647   # Model-averaged predictions f <- lapply(m, predict) head(avgEst(f, w)) #>        1        2        3        4        5        6  #> 56.13149 45.80461 42.12180 50.03650 53.71265 55.76698"},{"path":"https://murphymv.github.io/semEff/reference/bootCI.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Confidence Intervals — bootCI","title":"Bootstrap Confidence Intervals — bootCI","text":"Calculate confidence intervals bootstrapped model effects.","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootCI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Confidence Intervals — bootCI","text":"","code":"bootCI(mod, conf = 0.95, type = \"bca\", digits = 3, bci.arg = NULL, ...)"},{"path":"https://murphymv.github.io/semEff/reference/bootCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Confidence Intervals — bootCI","text":"mod fitted model object. Alternatively, boot object (class \"boot\"), containing bootstrapped model effects. Can also list nested list objects. conf numeric value specifying confidence level intervals. type type confidence interval return (defaults \"bca\" – see Details). See boot::boot.ci() options. digits number decimal places return numeric values. bci.arg named list additional arguments boot::boot.ci(), excepting argument index. ... Arguments bootEff().","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootCI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Confidence Intervals — bootCI","text":"summary table effects bootstrapped confidence intervals (data frame), list nested list .","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootCI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Confidence Intervals — bootCI","text":"bootCI() uses boot::boot.ci() calculate confidence intervals specified type level calculated bootstrapped model effects. model models supplied, bootstrapping first performed via bootEff(). Nonparametric bias-corrected accelerated confidence intervals (BCa; Efron, 1987) calculated default, provide accurate coverage across range bootstrap sampling distributions (Puth et al., 2015). , however, inappropriate parametric resampling – case default set bootstrap percentile method instead (\"perc\"). Effects confidence intervals returned summary table, along bootstrap standard errors (standard deviations samples) bootstrap biases (sample means minus original estimates). Effects confidence intervals contain zero highlighted star (.e. 'significant' conf level).","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootCI.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bootstrap Confidence Intervals — bootCI","text":"bootstrapped confidence intervals tend underestimate true nominal coverage extent sample size small (Chernick & Labudde, 2009), appropriate caution exercised interpretation cases. Comparison different interval types may informative. example, normal-theory based intervals may outperform bootstrap percentile methods n < 34 (Hesterberg, 2015). Ultimately however, bootstrap solution small sample size.","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootCI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Confidence Intervals — bootCI","text":"Chernick, M. R., & Labudde, R. . (2009). Revisiting Qualms Bootstrap Confidence Intervals. American Journal Mathematical Management Sciences, 29(3–4), 437–456. doi:10/c8zv Efron, B. (1987). Better Bootstrap Confidence Intervals. Journal American Statistical Association, 82(397), 171–185. doi:10/gfww2z Hesterberg, T. C. (2015). Teachers Know Bootstrap: Resampling Undergraduate Statistics Curriculum. American Statistician, 69(4), 371–386. doi:10/gd85v5 Puth, M.-T., Neuhäuser, M., & Ruxton, G. D. (2015). variety methods calculating confidence intervals bootstrapping. Journal Animal Ecology, 84(4), 892–897. doi:10/f8n9rq","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootCI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Confidence Intervals — bootCI","text":"","code":"# CIs calculated from bootstrapped SEM (shipley.sem.ci <- bootCI(shipley.sem.boot)) #> $DD #>                Effect     Bias   Std. Err.   Lower CI Upper CI     #>                ------   ------   ---------   -------- --------     #>  (Intercept) | -0.056 | -0.026 |     0.069 |   -0.167    0.085 |   #>  lat         | -0.688 |  0.026 |     0.101 |   -0.828   -0.459 | * #>  #> $Date #>                Effect     Bias   Std. Err.   Lower CI Upper CI     #>                ------   ------   ---------   -------- --------     #>  (Intercept) | -0.015 | -0.005 |     0.082 |   -0.167    0.179 |   #>  DD          | -0.628 |  0.000 |     0.057 |   -0.741   -0.519 | * #>  #> $Growth #>                Effect     Bias   Std. Err.   Lower CI Upper CI     #>                ------   ------   ---------   -------- --------     #>  (Intercept) | -0.292 | -0.006 |     0.090 |   -0.497   -0.141 | * #>  Date        |  0.382 |  0.011 |     0.058 |    0.293    0.515 | * #>  #> $Live #>                Effect    Bias   Std. Err.   Lower CI Upper CI     #>                ------   -----   ---------   -------- --------     #>  (Intercept) |  0.311 | 0.255 |     0.213 |    0.170    0.354 | * #>  Growth      |  0.368 | 0.151 |     0.130 |    0.246    0.411 | * #>   # From original SEM (models) # (not typically recommended – better to use saved boot objects) # system.time( #   shipley.sem.ci <- bootCI(shipley.sem, R = 1000, seed = 13, #                            ran.eff = \"site\") # )"},{"path":"https://murphymv.github.io/semEff/reference/bootEff.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Effects — bootEff","title":"Bootstrap Effects — bootEff","text":"Bootstrap model effects (standardised coefficients) optional SEM correlated errors.","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Effects — bootEff","text":"","code":"bootEff(   mod,   R,   seed = NULL,   type = c(\"nonparametric\", \"parametric\", \"semiparametric\"),   ran.eff = NULL,   cor.err = NULL,   catch.err = TRUE,   parallel = c(\"snow\", \"multicore\", \"no\"),   ncpus = NULL,   cl = NULL,   bM.arg = NULL,   ... )"},{"path":"https://murphymv.github.io/semEff/reference/bootEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Effects — bootEff","text":"mod fitted model object, list nested list objects. Alternatively, \"psem\" object piecewiseSEM::psem(). model lists unnamed, response variable names used. R Number bootstrap resamples generate. seed Seed random number generator. provided, random five-digit integer used (see Details). type type bootstrapping perform. Can \"nonparametric\" (default), \"parametric\", \"semiparametric\" (last two currently mixed models, via lme4::bootMer()). ran.eff nonparametric bootstrapping mixed models, name (highest-level) random effect resample (see Details). cor.err Optional, names SEM correlated errors bootstrapped (ignored mod \"psem\" object). form: c(\"var1 ~~ var2\", \"var3 ~~ var4\", ...) (spaces optional), using model/response variable names. catch.err Logical, errors generated model fitting estimation caught NA returned estimates? FALSE, errors cause function exit. parallel type parallel processing use. Can one \"snow\", \"multicore\", \"\" (none). ncpus Number system cores use parallel processing. NULL (default), available cores used. cl Optional cluster use parallel = \"snow\". NULL (default), local cluster created using specified number cores. bM.arg named list additional arguments lme4::bootMer(). ... Arguments stdEff().","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Effects — bootEff","text":"object class \"boot\" containing bootstrapped effects, (named) list/nested list objects.","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootEff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Effects — bootEff","text":"bootEff() uses boot::boot() (primarily) bootstrap standardised effects fitted model list models (calculated using stdEff()). Bootstrapping typically nonparametric, .e. model effects calculated data rows randomly sampled replacement. 10,000 resamples provide accurate coverage confidence intervals situations, fewer sufficing cases. ensure data resampled way across individual bootstrap operations within run (e.g. models list), seed set per operation, value saved attribute matrix bootstrapped values (reproducibility). seed can either user-supplied randomly-generated five-digit number (default), always re-initialised exit (.e. set.seed(NULL)). weights specified, bootstrapped effects weighted average across set candidate models response variable, calculated model first refit resampled dataset (specifying weights = \"equal\" use simple average instead – see avgEst()). weights specified mod nested list models, function throw error, expecting weights presumed model averaging scenario. instead user wishes bootstrap individual model, recursively apply function using rMapply() (remember set seed). names response variables correlated errors specified cor.err, function also return bootstrapped Pearson correlated errors (weighted residuals) models. weights supplied mod nested list, residuals first averaged across candidate models. two models (candidate sets) correlated errors fit different subsets data observations, models/sets first refit data containing observations common. nonparametric bootstrapping mixed models, resampling occur group-level, individual observations independent. name random effect resample must supplied ran.eff. nested random effects, highest-level group (Davison & Hinkley, 1997; Ren et al., 2010). form resampling result datasets different sizes observations unbalanced across groups; however generally issue, number independent units (groups), hence 'degrees freedom', remains unchanged. mixed models non-nested random effects, nonparametric resampling appropriate. cases, parametric semiparametric bootstrapping can performed instead via lme4::bootMer() (additional arguments passed function necessary). NOTE: lme4::bootMer() takes fitted model first argument (.e. lists), model averaging calculated 'post-hoc' using estimates boot objects candidate model, rather bootstrapping process (.e. default procedure via boot::boot()). Results returned new boot object response variable correlated error estimate. supplied list containing mixed non-mixed models, bootEff() nonparametric bootstrapping still work treat models mixed models resampling (warning). likely relatively rare scenario, may occur user decides non-mixed models perform similarly /cause less fitting issues mixed counterparts least response variables (e.g. random effect variance estimates near zero). data resampled supplied random effect models. nonparametric bootstrapping used scenario however, error occur, lme4::bootMer() accept mixed models. Parallel processing used default via parallel package option parallel = \"snow\" (generally recommended), users can specify type parallel processing use, none. \"snow\", cluster workers created using makeCluster(), user can specify number system cores incorporate cluster (defaults available). bootEff() exports required objects functions cluster using clusterExport(), performing (rough) match objects functions current global environment referenced model call(s). Users load required external packages prior calling function.","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootEff.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bootstrap Effects — bootEff","text":"Bootstrapping mixed (indeed ) models may take long time number replicates, observations, parameters, /models high. decrease processing time, may worth trying different optimisers /options generate faster estimates (always check results).","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootEff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Effects — bootEff","text":"Burnham, K. P., & Anderson, D. R. (2002). Model Selection Multimodel Inference: Practical Information-Theoretic Approach (2nd ed.). Springer-Verlag. https://link.springer.com/book/10.1007/b97636 Davison, . C., & Hinkley, D. V. (1997). Bootstrap Methods Application. Cambridge University Press. Ren, S., Lai, H., Tong, W., Aminzadeh, M., Hou, X., & Lai, S. (2010). Nonparametric bootstrapping hierarchical data. Journal Applied Statistics, 37(9), 1487–1498. doi:10/dvfzcn","code":""},{"path":"https://murphymv.github.io/semEff/reference/bootEff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Effects — bootEff","text":"","code":"# Bootstrap Shipley SEM (test – 1 rep) # (set 'site' as group for resampling – highest-level random effect) bootEff(shipley.sem, R = 1, ran.eff = \"site\", parallel = \"no\") #> $DD #>  #> ORDINARY NONPARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = x, statistic = s, R = R, parallel = parallel,  #>     ncpus = nc, cl = cl) #>  #>  #> Bootstrap Statistics : #>        original      bias    std. error #> t1* -0.05600661 -0.03759749          NA #> t2* -0.68772025  0.04417058          NA #>  #> $Date #>  #> ORDINARY NONPARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = x, statistic = s, R = R, parallel = parallel,  #>     ncpus = nc, cl = cl) #>  #>  #> Bootstrap Statistics : #>        original      bias    std. error #> t1* -0.01493651 -0.03938594          NA #> t2* -0.62813666  0.01186123          NA #>  #> $Growth #>  #> ORDINARY NONPARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = x, statistic = s, R = R, parallel = parallel,  #>     ncpus = nc, cl = cl) #>  #>  #> Bootstrap Statistics : #>       original      bias    std. error #> t1* -0.2917507 -0.04310056          NA #> t2*  0.3824224 -0.05454842          NA #>  #> $Live #>  #> ORDINARY NONPARAMETRIC BOOTSTRAP #>  #>  #> Call: #> boot::boot(data = x, statistic = s, R = R, parallel = parallel,  #>     ncpus = nc, cl = cl) #>  #>  #> Bootstrap Statistics : #>      original    bias    std. error #> t1* 0.3105220 0.2796271          NA #> t2* 0.3681961 0.1489441          NA #>   # Check estimates (use saved boot object – 1000 reps) lapply(shipley.sem.boot, \"[[\", 1)  # original #> $DD #> (Intercept)         lat  #> -0.05600661 -0.68772025  #>  #> $Date #> (Intercept)          DD  #> -0.01493651 -0.62813666  #>  #> $Growth #> (Intercept)        Date  #>  -0.2917507   0.3824224  #>  #> $Live #> (Intercept)      Growth  #>   0.3105220   0.3681961  #>  lapply(shipley.sem.boot, function(i) head(i$t))  # bootstrapped #> $DD #>      (Intercept)        lat #> [1,]  0.07884187 -0.5481916 #> [2,] -0.09289124 -0.6231252 #> [3,] -0.20894499 -0.6936512 #> [4,] -0.13368868 -0.4139394 #> [5,] -0.10229480 -0.7023361 #> [6,] -0.01969415 -0.6358960 #>  #> $Date #>      (Intercept)         DD #> [1,] -0.11082251 -0.6196655 #> [2,] -0.12908598 -0.6238294 #> [3,]  0.01454823 -0.6291431 #> [4,] -0.03500544 -0.5212996 #> [5,] -0.04554961 -0.5774458 #> [6,] -0.02636631 -0.5555745 #>  #> $Growth #>      (Intercept)      Date #> [1,]  -0.2900700 0.3256320 #> [2,]  -0.2223630 0.3988001 #> [3,]  -0.3721685 0.4173523 #> [4,]  -0.2221964 0.3551045 #> [5,]  -0.1850172 0.4199339 #> [6,]  -0.3353260 0.3531018 #>  #> $Live #>      (Intercept)    Growth #> [1,]   1.0030671 0.8118620 #> [2,]   0.3839991 0.3822085 #> [3,]   0.4223174 0.4173702 #> [4,]   0.3149438 0.3793002 #> [5,]   0.6149997 0.5659556 #> [6,]   0.6737008 0.5710483 #>"},{"path":"https://murphymv.github.io/semEff/reference/getData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Model Data — getData","title":"Get Model Data — getData","text":"Extract data used fit model.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Model Data — getData","text":"","code":"getData(mod, subset = FALSE, merge = FALSE, env = NULL)"},{"path":"https://murphymv.github.io/semEff/reference/getData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Model Data — getData","text":"mod fitted model object, list nested list objects. subset Logical. TRUE, observations used fit model(s) returned (.e. missing observations (NA) zero weight removed). merge Logical. TRUE, mod list nested list, single dataset containing variables used fit models returned (variables must length). env Environment look data (passed eval()). Defaults formula() environment.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Model Data — getData","text":"data frame variables used fit model(s), list nested list .","code":""},{"path":"https://murphymv.github.io/semEff/reference/getData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Model Data — getData","text":"simple convenience function return data used fit model, evaluating 'data' slot model call object. 'data' argument model call specified, data frame (coercible ) containing variables referenced model formula, error thrown – restriction largely ensure single coherent dataset model variables can made available resampling purposes. mod list models merge = TRUE, (unique) variables used fit models merged single data frame. return error subset = TRUE results datasets different numbers observations (rows).","code":""},{"path":[]},{"path":"https://murphymv.github.io/semEff/reference/getData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Model Data — getData","text":"","code":"# Get data used to fit SEM from Shipley (2009) head(getData(shipley.sem[[1]]))  # from single model #>   site tree      lat year     Date       DD   Growth  Survival Live #> 1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1 #> 2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1 #> 3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1 #> 4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1 #> 5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1 #> 6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1 lapply(getData(shipley.sem), head)  # from SEM (list) #> $DD #>   site tree      lat year     Date       DD   Growth  Survival Live #> 1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1 #> 2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1 #> 3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1 #> 4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1 #> 5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1 #> 6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1 #>  #> $Date #>   site tree      lat year     Date       DD   Growth  Survival Live #> 1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1 #> 2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1 #> 3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1 #> 4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1 #> 5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1 #> 6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1 #>  #> $Growth #>   site tree      lat year     Date       DD   Growth  Survival Live #> 1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1 #> 2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1 #> 3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1 #> 4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1 #> 5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1 #> 6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1 #>  #> $Live #>   site tree      lat year     Date       DD   Growth  Survival Live #> 1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1 #> 2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1 #> 3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1 #> 4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1 #> 5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1 #> 6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1 #>  head(getData(shipley.sem, merge = TRUE))  # from SEM (single dataset) #>   site tree      lat year     Date       DD   Growth  Survival Live #> 1    1    1 40.38063 1970 115.4956 160.5703 61.36852 0.9996238    1 #> 2    1    2 40.38063 1970 118.4959 158.9896 43.77182 0.8433521    1 #> 3    1    3 40.38063 1970 115.8836 159.9262 44.74663 0.9441110    1 #> 4    1    4 40.38063 1970 110.9889 161.1282 48.20004 0.9568525    1 #> 5    1    5 40.38063 1970 120.9946 157.3778 50.02237 0.9759584    1 #> 6    1    1 40.38063 1972 114.2315 160.6120 56.29615 0.9983398    1"},{"path":"https://murphymv.github.io/semEff/reference/getEff.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SEM Effects — getEff","title":"Get SEM Effects — getEff","text":"Extract SEM effects object class \"semEff\".","code":""},{"path":"https://murphymv.github.io/semEff/reference/getEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SEM Effects — getEff","text":"","code":"getEff(eff, responses = NULL, type = c(\"orig\", \"boot\"))  getDirEff(...)  getIndEff(...)  getTotEff(...)  getMedEff(...)  getAllInd(eff, ...)  getEffTable(eff, ...)  getDirEffTable(...)  getIndEffTable(...)  getTotEffTable(...)  getMedEffTable(...)"},{"path":"https://murphymv.github.io/semEff/reference/getEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SEM Effects — getEff","text":"eff object class \"semEff\". responses optional character vector, names one SEM response variables return effects. Can also numeric vector indices eff. NULL (default), effects returned. type type effects return. Can \"orig\" (original estimates - default) \"boot\" (bootstrapped). ... Arguments () passed getEff() extractor functions. type = \"boot\" available getAllInd() getEffTable() (derivatives).","code":""},{"path":"https://murphymv.github.io/semEff/reference/getEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SEM Effects — getEff","text":"list containing original bootstrapped effects response variable numeric vectors matrices (respectively), table (unformatted) effects confidence intervals (getEffTable()).","code":""},{"path":"https://murphymv.github.io/semEff/reference/getEff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get SEM Effects — getEff","text":"simple extractor functions effects calculated using semEff(), intended convenience (e.g. use predEff()).","code":""},{"path":"https://murphymv.github.io/semEff/reference/getEff.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get SEM Effects — getEff","text":"getEff(): Get effects. getDirEff(): Get direct effects. getIndEff(): Get indirect effects. getTotEff(): Get total effects. getMedEff(): Get mediator effects. getAllInd(): Get indirect effects. getEffTable(): Get effects table. getDirEffTable(): Get direct effects table. getIndEffTable(): Get indirect effects table. getTotEffTable(): Get total effects table. getMedEffTable(): Get mediator effects table.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getFamily.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Model Error Distribution Family — getFamily","title":"Get Model Error Distribution Family — getFamily","text":"Extract error distribution family (link function) fitted model.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getFamily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Model Error Distribution Family — getFamily","text":"","code":"getFamily(mod)"},{"path":"https://murphymv.github.io/semEff/reference/getFamily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Model Error Distribution Family — getFamily","text":"mod fitted model object, list nested list objects.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getFamily.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Model Error Distribution Family — getFamily","text":"model \"family\" object, list nested list objects.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getFamily.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Model Error Distribution Family — getFamily","text":"getFamily() returns appropriate family object range different model classes, similarly family(). However, can also used classes without existing family method. Mostly internal use.","code":""},{"path":[]},{"path":"https://murphymv.github.io/semEff/reference/getFamily.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Model Error Distribution Family — getFamily","text":"","code":"# SEM model error distributions getFamily(shipley.sem) #>            DD         Date       Growth     Live       #> family     \"gaussian\" \"gaussian\" \"gaussian\" \"binomial\" #> link       \"identity\" \"identity\" \"identity\" \"logit\"    #> linkfun    ?          ?          ?          ?          #> linkinv    ?          ?          ?          ?          #> variance   ?          ?          ?          ?          #> dev.resids ?          ?          ?          ?          #> aic        ?          ?          ?          ?          #> mu.eta     ?          ?          ?          ?          #> initialize ?          ?          ?          expression #> validmu    ?          ?          ?          ?          #> valideta   ?          ?          ?          ?          #> dispersion NA         NA         NA         ?"},{"path":"https://murphymv.github.io/semEff/reference/getX.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Model Design Matrix — getX","title":"Get Model Design Matrix — getX","text":"Return design matrix fitted model, additional options.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Model Design Matrix — getX","text":"","code":"getX(   mod,   data = NULL,   contrasts = NULL,   add.data = FALSE,   centre = FALSE,   scale = FALSE,   as.df = FALSE,   merge = FALSE,   env = NULL )"},{"path":"https://murphymv.github.io/semEff/reference/getX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Model Design Matrix — getX","text":"mod fitted model object, list nested list objects. Can also model formula(s) character vector(s) term names (case data must supplied). data optional dataset, used refit model(s) /construct design matrix. contrasts Optional, named list contrasts apply factors (see contrasts.arg argument model.matrix() specification). override existing contrasts data model call. add.data Logical, whether append data specified model formula (factors converted dummy variables). centre, scale Logical, whether mean-centre /scale terms standard deviations (interactions, carried prior construction product terms). Alternatively, numeric vector means/standard deviations (statistics) can supplied, whose names must match term names. .df Logical, whether return matrix data frame (without modifying names). merge Logical. TRUE, mod list nested list, single matrix containing terms returned (variables must length). env Environment look model data (none supplied). Defaults formula() environment.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Model Design Matrix — getX","text":"matrix data frame model(s) terms, list nested list .","code":""},{"path":"https://murphymv.github.io/semEff/reference/getX.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Model Design Matrix — getX","text":"primarily convenience function enable flexible construction design matrices, usually internal use processing. Use cases include processing /return terms may present typical design matrix (e.g. constituents product terms, dummy variables).","code":""},{"path":[]},{"path":"https://murphymv.github.io/semEff/reference/getX.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Model Design Matrix — getX","text":"","code":"# Model design matrix (original) m <- shipley.growth[[3]] x1 <- model.matrix(m) x2 <- getX(m) stopifnot(all.equal(x1, x2, check.attributes = FALSE))  # Using formula or term names (supply data) d <- shipley x1 <- getX(formula(m), data = d) x2 <- getX(names(lme4::fixef(m)), data = d) stopifnot(all.equal(x1, x2))  # Scaled terms head(getX(m, centre = TRUE, scale = TRUE)) #>   (Intercept)       Date       DD       lat #> 1           1 -1.4031190 1.636031 -2.792213 #> 2           1 -1.0345918 1.482206 -2.792213 #> 3           1 -1.3554697 1.573358 -2.792213 #> 4           1 -1.9566917 1.690329 -2.792213 #> 5           1 -0.7276695 1.325356 -2.792213 #> 6           1 -1.5583973 1.640097 -2.792213  # Combined matrix for SEM head(getX(shipley.sem, merge = TRUE)) #>   (Intercept)      lat       DD     Date   Growth #> 1           1 40.38063 160.5703 115.4956 61.36852 #> 2           1 40.38063 158.9896 118.4959 43.77182 #> 3           1 40.38063 159.9262 115.8836 44.74663 #> 4           1 40.38063 161.1282 110.9889 48.20004 #> 5           1 40.38063 157.3778 120.9946 50.02237 #> 6           1 40.38063 160.6120 114.2315 56.29615 head(getX(shipley.sem, merge = TRUE, add.data = TRUE))  # add other variables #>   (Intercept)      lat site tree year     Date       DD   Growth  Survival Live #> 1           1 40.38063    1    1 1970 115.4956 160.5703 61.36852 0.9996238    1 #> 2           1 40.38063    1    2 1970 118.4959 158.9896 43.77182 0.8433521    1 #> 3           1 40.38063    1    3 1970 115.8836 159.9262 44.74663 0.9441110    1 #> 4           1 40.38063    1    4 1970 110.9889 161.1282 48.20004 0.9568525    1 #> 5           1 40.38063    1    5 1970 120.9946 157.3778 50.02237 0.9759584    1 #> 6           1 40.38063    1    1 1972 114.2315 160.6120 56.29615 0.9983398    1"},{"path":"https://murphymv.github.io/semEff/reference/getY.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Model Response Variable — getY","title":"Get Model Response Variable — getY","text":"Extract response variable fitted model original link scale.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Model Response Variable — getY","text":"","code":"getY(mod, data = NULL, link = FALSE, offset = FALSE, env = NULL)"},{"path":"https://murphymv.github.io/semEff/reference/getY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Model Response Variable — getY","text":"mod fitted model object, list nested list objects. data optional dataset, used first refit model(s). link Logical. TRUE, return GLM response variable link scale (see Details). offset Logical. TRUE, include model offset(s) response. env Environment look model data (none supplied). Defaults formula() environment.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Model Response Variable — getY","text":"numeric vector comprising response variable original link scale, array, list vectors/arrays, nested list.","code":""},{"path":"https://murphymv.github.io/semEff/reference/getY.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Model Response Variable — getY","text":"getY() return response variable model summing fitted values response residuals. link = TRUE model GLM, response transformed link scale. results undefined values, estimate based 'working' response variable GLM returned instead (see glt()). offset variables subtracted response default. means , example, rates rather raw counts returned poisson GLMs (applicable).","code":""},{"path":"https://murphymv.github.io/semEff/reference/getY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Model Response Variable — getY","text":"","code":"# All SEM responses (original scale) head(getY(shipley.sem)) #>         DD     Date   Growth Live #> 1 160.5703 115.4956 61.36852    1 #> 2 158.9896 118.4959 43.77182    1 #> 3 159.9262 115.8836 44.74663    1 #> 4 161.1282 110.9889 48.20004    1 #> 5 157.3778 120.9946 50.02237    1 #> 6 160.6120 114.2315 56.29615    1  # Estimated response in link scale from binomial model head(getY(shipley.sem$Live, link = TRUE)) #>        1        2        3        4        5        6  #> 18.56607 18.56607 18.56607 18.56607 18.56607 18.56607"},{"path":"https://murphymv.github.io/semEff/reference/glt.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalised Link Transformation — glt","title":"Generalised Link Transformation — glt","text":"Transform numeric variable using GLM link function, return estimate .","code":""},{"path":"https://murphymv.github.io/semEff/reference/glt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalised Link Transformation — glt","text":"","code":"glt(x, family = NULL, force.est = FALSE)"},{"path":"https://murphymv.github.io/semEff/reference/glt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalised Link Transformation — glt","text":"x positive numeric vector, corresponding variable transformed. Can also list nested list vectors. family Optional, error distribution family containing link function used transform x (see family() specification details). supplied, determined x (see Details). force.est Logical, whether force return estimated rather direct transformation, latter available (.e. contain undefined values).","code":""},{"path":"https://murphymv.github.io/semEff/reference/glt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalised Link Transformation — glt","text":"numeric vector transformed values, array, list vectors/arrays, nested list.","code":""},{"path":"https://murphymv.github.io/semEff/reference/glt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalised Link Transformation — glt","text":"glt() can used provide 'generalised' transformation numeric variable, using link function generalised linear model (GLM) fit variable. transformation generalised sense can extend even cases standard link transformation produce undefined values. achieves using estimate based 'working' response variable GLM (see ). error distribution family specified (default), determined (roughly) x, binomial(link = \"logit\") used x <= 1 poisson(link = \"log\") otherwise. Although function generally intended variables binomial Poisson distribution, variable can fit using glm() can supplied. One key purposes glt() allow calculation fully standardised effects (coefficients) GLMs (case x = response variable), can also facilitate proper calculation SEM indirect effects (see ). Estimating direct link transformation key challenge generating fully standardised effects GLM non-gaussian link function difficulty calculating appropriate standardised ranges (typically standard deviation) response variable link scale. direct transformation response often produce undefined values. Although methods circumventing issue indirectly estimating variance response link scale proposed – including latent-theoretic approach binomial models (McKelvey & Zavoina, 1975) general variance-based method using pseudo R-squared (Menard, 2011) – alternative approach used. transformed values undefined, function instead return synthetic 'working' response iteratively reweighted least squares (IRLS) algorithm GLM (McCullagh & Nelder, 1989). reconstructed sum linear predictor working residuals – latter comprising error model link scale. advantage approach relatively straightforward 'transformation' non-gaussian response readily attainable cases. standard deviation (relevant range) can calculated using values transformed response used scale effects. additional benefit piecewise SEMs transformed rather original response can specified predictor models, ensuring standardised indirect total effects calculated correctly (.e. using units). ensure high level 'accuracy' working response – sense inverse-transformation practically indistinguishable original response variable – function uses following iterative fitting procedure calculate 'final' working response: new GLM error family fit original response variable predictor response, using single IRLS iteration. working response reconstructed model. inverse transformation working response calculated. inverse transformation 'effectively equal' original response (tested using .equal() default tolerance 1.5e-8), working response returned; otherwise, GLM refit working response now predictor, steps 2-4 repeated – time additional IRLS iteration. approach generate reasonable transformation response variable, also practically indistinguishable direct transformation, can compared (see Examples). also ensures transformed values, hence standard deviation, GLM fitting response (provided uses link function) – facilitating model comparisons, selection, averaging.","code":""},{"path":"https://murphymv.github.io/semEff/reference/glt.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generalised Link Transformation — glt","text":"often directly observe GLM response variable link scale, method estimating values statistics wrong degree. heuristic approach described aims reduce error far (reasonably) possible, also generating standardised effects whose interpretation closely resembles ordinary linear model. solution using working response GLM scale effects practical, reasonable one, one takes advantage modern computing power minimise error iterative model fitting. added bonus estimated variance constant across models fit response variable, said previous methods (Menard, 2011). overall approach classed 'observed-empirical' Grace et al. (2018), utilises model error variance (estimated working residuals) rather theoretical distribution-specific variance.","code":""},{"path":"https://murphymv.github.io/semEff/reference/glt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalised Link Transformation — glt","text":"Grace, J. B., Johnson, D. J., Lefcheck, J. S., & Byrnes, J. E. K. (2018). Quantifying relative importance: computing standardized effects models binary outcomes. Ecosphere, 9, e02283. doi:10/gdm5bj McCullagh P., & Nelder, J. . (1989). Generalized Linear Models (2nd Edition). Chapman Hall. McKelvey, R. D., & Zavoina, W. (1975). statistical model analysis ordinal level dependent variables. Journal Mathematical Sociology, 4(1), 103-120. doi:10/dqfhpp Menard, S. (2011). Standards Standardized Logistic Regression Coefficients. Social Forces, 89, 1409-1428. doi:10/bvxb6s","code":""},{"path":"https://murphymv.github.io/semEff/reference/glt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalised Link Transformation — glt","text":"","code":"# Compare estimate with a direct link transformation # (test with a poisson variable, log link) set.seed(13) y <- rpois(30, lambda = 10) yl <- unname(glt(y, force.est = TRUE))  # Effectively equal? all.equal(log(y), yl) #> [1] TRUE # TRUE  # Actual difference... all.equal(log(y), yl, tolerance = .Machine$double.eps) #> [1] \"Mean relative difference: 2.489317e-10\" # \"Mean relative difference: 2.489317e-10\""},{"path":"https://murphymv.github.io/semEff/reference/pSapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel sapply() — pSapply","title":"Parallel sapply() — pSapply","text":"Apply function vector using parallel processing.","code":""},{"path":"https://murphymv.github.io/semEff/reference/pSapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel sapply() — pSapply","text":"","code":"pSapply(   X,   FUN,   parallel = c(\"snow\", \"multicore\", \"no\"),   ncpus = NULL,   cl = NULL,   add.obj = NULL,   ... )"},{"path":"https://murphymv.github.io/semEff/reference/pSapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel sapply() — pSapply","text":"X vector object (numeric, character, list). FUN Function apply elements X. parallel type parallel processing use. Can one \"snow\" (default), \"multicore\" (available Windows), \"\" (none). See Details. ncpus Number system cores use parallel processing. NULL (default), available cores used. cl Optional cluster use parallel = \"snow\". NULL (default), local cluster created using specified number cores. add.obj character vector additional object names exported cluster. Use required object function found. ... Additional arguments parSapply(), mcmapply(), sapply() (note: arguments \"simplify\" \"SIMPLIFY\" allowed).","code":""},{"path":"https://murphymv.github.io/semEff/reference/pSapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel sapply() — pSapply","text":"output FUN list, simplified vector array.","code":""},{"path":"https://murphymv.github.io/semEff/reference/pSapply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel sapply() — pSapply","text":"wrapper parallel::parSapply() (\"snow\") parallel::mcmapply() (\"multicore\"), enabling (potentially) faster processing function vector objects. parallel = \"\", sapply() used instead. Parallel processing via option \"snow\" (default) carried using cluster workers, automatically set via makeCluster() using available system cores user supplied number cores. function exports required objects functions cluster using clusterExport(), performing (rough) match objects functions current global environment referenced call FUN (also calls X). additional required object names can supplied using add.obj.","code":""},{"path":"https://murphymv.github.io/semEff/reference/predEff.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Effects — predEff","title":"Predict Effects — predEff","text":"Generate predicted values SEM direct, indirect, total effects.","code":""},{"path":"https://murphymv.github.io/semEff/reference/predEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Effects — predEff","text":"","code":"predEff(   mod,   newdata = NULL,   effects = NULL,   eff.boot = NULL,   re.form = NA,   type = c(\"link\", \"response\"),   interaction = NULL,   use.raw = FALSE,   ci.conf = 0.95,   ci.type = \"bca\",   digits = 3,   bci.arg = NULL,   parallel = \"no\",   ncpus = NULL,   cl = NULL,   ... )"},{"path":"https://murphymv.github.io/semEff/reference/predEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Effects — predEff","text":"mod fitted model object, list nested list objects. newdata optional data frame new values predict, contain variables named effects used fit mod. effects numeric vector effects predict, list nested list vectors. typically calculated using semEff(), bootEff(), stdEff(). Alternatively, boot object produced bootEff() can supplied. eff.boot matrix bootstrapped effects used calculate confidence intervals predictions, list nested list matrices. calculated using semEff() bootEff(). re.form mixed models class \"merMod\", formula random effects condition predicting effects. Defaults NA, meaning random effects averaged . See lme4:::predict.merMod() specification details. type type prediction return (GLMs). Can either \"link\" (default) \"response\". interaction optional name interactive effect, return standardised effects 'main' continuous variable across different values levels interacting variables (see Details). use.raw Logical, whether use raw (unstandardised) effects calculations (present). ci.conf numeric value specifying confidence level confidence intervals predictions (interactive effects). ci.type type confidence interval return (defaults \"bca\" – see Details). See boot::boot.ci() specification details. digits number significant digits return interactive effects. bci.arg named list additional arguments boot::boot.ci(), excepting argument index. parallel type parallel processing use calculating confidence intervals predictions. Can one \"snow\", \"multicore\", \"\" (none – default). ncpus Number system cores use parallel processing. NULL (default), available cores used. cl Optional cluster use parallel = \"snow\". NULL (default), local cluster created using specified number cores. ... Arguments stdEff().","code":""},{"path":"https://murphymv.github.io/semEff/reference/predEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Effects — predEff","text":"numeric vector predictions, , bootstrapped effects supplied, list containing predictions upper lower confidence intervals. Optional interactive effects may also appended. Predictions may also returned list nested list, depending structure mod (arguments).","code":""},{"path":"https://murphymv.github.io/semEff/reference/predEff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Effects — predEff","text":"Generate predicted values SEM direct, indirect, total effects response variable, supplied effects. used place model coefficients standard prediction formula, values predictors drawn either data used fit original model(s) (mod) newdata. assumed effects fully standardised; however, case, centring scaling options originally specified stdEff() re-specified – used standardise data. effects supplied, standardised (direct) effects calculated model used generate predictions. predictions equal model(s) fitted values newdata = NULL, unique.eff = FALSE, re.form = NULL (applicable). Model-averaged predictions can generated averaged effects supplied model mod, , alternatively, weights specified (passed stdEff()) mod list candidate models (effects can also passed using latter method). mixed model predictions random effects included (e.g. re.form = NULL), latter approach used, otherwise contribution random effects taken single model instead (correctly) averaged candidate set. bootstrapped effects supplied eff.boot (effects, part boot object), bootstrapped predictions calculated predicting effect. Confidence intervals can returned via bootCI(), type appropriate original form bootstrap sampling (defaults \"bca\"). number observations predict large, parallel processing (via pSapply()) may speed calculation intervals. Predictions always returned original (typically unstandardised) units (link-transformed) response variable. GLMs, can returned response scale type = \"response\". Additionally, name interactive effect supplied interaction, standardised effects (confidence intervals) can returned effects continuous 'main' variable across different values levels interacting variable(s). name form \"x1:x2...\", containing variables involved matching name interactive effect model(s) terms effects. values variables supplied newdata, main continuous variable automatically identified unique values.","code":""},{"path":[]},{"path":"https://murphymv.github.io/semEff/reference/predEff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Effects — predEff","text":"","code":"# Predict effects (direct, total) m <- shipley.sem e <- shipley.sem.eff dir <- getDirEff(e) tot <- getTotEff(e) f.dir <- predEff(m, effects = dir, type = \"response\") f.tot <- predEff(m, effects = tot, type = \"response\") f.dir$Live[1:10] #>         1         2         3         4         5         6         7         8  #> 0.9998907 0.9525798 0.9657500 0.9894445 0.9943723 0.9993621 0.9911463 0.9582557  #>         9        10  #> 0.9982749 0.9989735  f.tot$Live[1:10] #>         1         2         3         4         5         6         7         8  #> 0.9975858 0.5742006 0.5783691 0.7196629 0.9436709 0.9840953 0.8998478 0.5468860  #>         9        10  #> 0.9462890 0.9887104   # Using new data for predictors d <- na.omit(shipley) xn <- c(\"lat\", \"DD\", \"Date\", \"Growth\") seq100 <- function(x) seq(min(x), max(x), length = 100) nd <- data.frame(sapply(d[xn], seq100)) f.dir <- predEff(m, nd, dir, type = \"response\") f.tot <- predEff(m, nd, tot, type = \"response\") f.dir$Live[1:10] #>         1         2         3         4         5         6         7         8  #> 0.3000301 0.3279412 0.3571239 0.3874066 0.4185852 0.4504280 0.4826822 0.5150813  #>         9        10  #> 0.5473542 0.5792338  f.tot$Live[1:10] #>          1          2          3          4          5          6          7  #> 0.05467217 0.06338280 0.07337353 0.08479648 0.09781007 0.11257517 0.12924985  #>          8          9         10  #> 0.14798252 0.16890356 0.19211539  # Add CIs # dir.b <- getDirEff(e, \"boot\") # tot.b <- getTotEff(e, \"boot\") # f.dir <- predEff(m, nd, dir, dir.b, type = \"response\") # f.tot <- predEff(m, nd, tot, tot.b, type = \"response\")  # Predict an interactive effect (e.g. Live ~ Growth * DD) xn <- c(\"Growth\", \"DD\") d[xn] <- scale(d[xn])  # scale predictors (improves fit) m <- lme4::glmer(Live ~ Growth * DD + (1 | site) + (1 | tree),                  family = binomial, data = d) nd <- with(d, expand.grid(   Growth = seq100(Growth),   DD = mean(DD) + c(-sd(DD), sd(DD))  # two levels for DD )) f <- predEff(m, nd, type = \"response\", interaction = \"Growth:DD\") f$fit[1:10] #>         1         2         3         4         5         6         7         8  #> 0.2935522 0.3230338 0.3539926 0.3862256 0.4194877 0.4534979 0.4879478 0.5225126  #>         9        10  #> 0.5568630 0.5906782  f$interaction #> Growth:DD_1 Growth:DD_2  #>       0.393       0.286  # Add CIs (need to bootstrap model...) # system.time(B <- bootEff(m, R = 1000, ran.eff = \"site\")) # f <- predEff(m, nd, B, type = \"response\", interaction = \"Growth:DD\")  # Model-averaged predictions (several approaches) m <- shipley.growth  # candidate models (list) w <- runif(length(m), 0, 1)  # weights e <- stdEff(m, w)  # averaged effects f1 <- predEff(m[[1]], effects = e)  # pass avg. effects f2 <- predEff(m, weights = w)  # pass weights argument f3 <- avgEst(predEff(m), w)  # use avgEst function stopifnot(all.equal(f1, f2)) stopifnot(all.equal(f2, f3))  # Compare model fitted values: predEff() vs. fitted() m <- shipley.sem$Live f1 <- predEff(m, unique.eff = FALSE, re.form = NULL, type = \"response\") f2 <- fitted(m) stopifnot(all.equal(f1, f2))  # Compare predictions using standardised vs. raw effects (same) f1 <- predEff(m) f2 <- predEff(m, use.raw = TRUE) stopifnot(all.equal(f1, f2))"},{"path":"https://murphymv.github.io/semEff/reference/print.bootCI.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ","title":"Print ","text":"print() method object class \"bootCI\".","code":""},{"path":"https://murphymv.github.io/semEff/reference/print.bootCI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ","text":"","code":"# S3 method for class 'bootCI' print(x, ...)"},{"path":"https://murphymv.github.io/semEff/reference/print.bootCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ","text":"x object class \"bootCI\". ... arguments passed methods. currently used.","code":""},{"path":"https://murphymv.github.io/semEff/reference/print.bootCI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ","text":"summary table effects bootstrapped confidence intervals (data frame).","code":""},{"path":"https://murphymv.github.io/semEff/reference/print.semEff.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ","title":"Print ","text":"print() method object class \"semEff\".","code":""},{"path":"https://murphymv.github.io/semEff/reference/print.semEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ","text":"","code":"# S3 method for class 'semEff' print(x, ...)"},{"path":"https://murphymv.github.io/semEff/reference/print.semEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ","text":"x object class \"semEff\". ... arguments passed methods. currently used.","code":""},{"path":"https://murphymv.github.io/semEff/reference/print.semEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ","text":"summary table SEM variables (data frame).","code":""},{"path":"https://murphymv.github.io/semEff/reference/print.semEff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print ","text":"print method returns summary table SEM variables, giving status exogenous endogenous predictor, mediator /response. also gives number direct vs. indirect paths leading variable, number correlated errors (applicable).","code":""},{"path":"https://murphymv.github.io/semEff/reference/rMapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursive mapply() — rMapply","title":"Recursive mapply() — rMapply","text":"Recursively apply function list lists.","code":""},{"path":"https://murphymv.github.io/semEff/reference/rMapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursive mapply() — rMapply","text":"","code":"rMapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)"},{"path":"https://murphymv.github.io/semEff/reference/rMapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursive mapply() — rMapply","text":"FUN Function apply. ... Object(s) FUN can applied, lists objects iterate (defined narrowly, class \"list\"). MoreArgs list additional arguments FUN. SIMPLIFY Logical, whether simplify results vector array. USE.NAMES Logical, whether use names first list object ... output.","code":""},{"path":"https://murphymv.github.io/semEff/reference/rMapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursive mapply() — rMapply","text":"output FUN list nested list, simplified vector array (list arrays).","code":""},{"path":"https://murphymv.github.io/semEff/reference/rMapply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recursive mapply() — rMapply","text":"rMapply() recursively applies FUN elements lists ... via mapply(). single list supplied, function acts like recursive version sapply(). particular condition determines function stop recursing either first second objects ... class \"list\". Thus, unlike mapply(), iterate non-list elements objects, instead returns output FUN(...). primarily convenience function used internally enable recursive application functions lists nested lists. particular stop condition recursing also designed either ) act wrapper FUN first object ... list, b) apply weighted averaging operation first object list second object numeric vector weights.","code":""},{"path":"https://murphymv.github.io/semEff/reference/sdW.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Standard Deviation — sdW","title":"Weighted Standard Deviation — sdW","text":"Calculate weighted standard deviation x.","code":""},{"path":"https://murphymv.github.io/semEff/reference/sdW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Standard Deviation — sdW","text":"","code":"sdW(...)"},{"path":"https://murphymv.github.io/semEff/reference/sdW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Standard Deviation — sdW","text":"... Arguments varW().","code":""},{"path":"https://murphymv.github.io/semEff/reference/sdW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Standard Deviation — sdW","text":"numeric value, weighted standard deviation x.","code":""},{"path":"https://murphymv.github.io/semEff/reference/sdW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted Standard Deviation — sdW","text":"simply wrapper varW(), applying square root output.","code":""},{"path":[]},{"path":"https://murphymv.github.io/semEff/reference/semEff-package.html","id":null,"dir":"Reference","previous_headings":"","what":"semEff: Automatic Calculation of Effects for Piecewise Structural Equation Models — semEff-package","title":"semEff: Automatic Calculation of Effects for Piecewise Structural Equation Models — semEff-package","text":"Automatically calculate direct, indirect, total effects piecewise structural equation models, comprising lists fitted models representing structured equations (Lefcheck, 2016 doi:10/f8s8rb ). Confidence intervals provided via bootstrapping.","code":""},{"path":[]},{"path":"https://murphymv.github.io/semEff/reference/semEff-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semEff: Automatic Calculation of Effects for Piecewise Structural Equation Models — semEff-package","text":"Maintainer: Mark V. Murphy murphymv@gmail.com","code":""},{"path":"https://murphymv.github.io/semEff/reference/semEff.html","id":null,"dir":"Reference","previous_headings":"","what":"SEM Effects — semEff","title":"SEM Effects — semEff","text":"Automatically calculate direct, indirect, total, mediator effects endogenous (response) variables 'piecewise' structural equation model (SEM).","code":""},{"path":"https://murphymv.github.io/semEff/reference/semEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEM Effects — semEff","text":"","code":"semEff(   sem,   predictors = NULL,   mediators = NULL,   excl.other.med = FALSE,   use.raw = FALSE,   ci.conf = 0.95,   ci.type = \"bca\",   digits = 3,   bci.arg = NULL,   ... )"},{"path":"https://murphymv.github.io/semEff/reference/semEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SEM Effects — semEff","text":"sem piecewise SEM, comprising list fitted model objects boot objects (containing bootstrapped model effects). Alternatively, \"psem\" object piecewiseSEM::psem(). list unnamed, response variable names used. predictors, mediators Names variables /calculate effects. NULL (default), predictors/mediators SEM used. excl..med Logical, whether exclude SEM mediators calculating indirect effects, .e., specified mediators argument. Useful examining individual effect pathways specified mediators, rather including paths involving (default). Ignored mediators = NULL. use.raw Logical, whether use 'raw' (unstandardised) effects calculations (present sem). ci.conf numeric value specifying confidence level confidence intervals effects. ci.type type confidence interval return (defaults \"bca\" – see Details). See boot::boot.ci() specification details. digits number decimal places return numeric values (summary tables). bci.arg named list additional arguments boot::boot.ci(), excepting argument index. ... Arguments bootEff().","code":""},{"path":"https://murphymv.github.io/semEff/reference/semEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SEM Effects — semEff","text":"list object class \"semEff\" several methods extractor functions available. Contains: Summary tables effects confidence intervals effects bootstrapped effects indirect effects (individual, summed)","code":""},{"path":"https://murphymv.github.io/semEff/reference/semEff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SEM Effects — semEff","text":"eponymous function package calculates direct, indirect, total, mediator effects 'piecewise' structural equation model (SEM), , one parameter estimation local rather global (Lefcheck, 2016; Shipley, 2000, 2009). SEM simply takes form list fitted models, bootstrapped estimates models, describing hypothesised causal pathways predictors response ('endogenous') variables. either direct, operate indirectly via response variables ('mediators'). list represent directed ('acyclic') causal model, named exactly response variable ordered 'upstream' 'causal' variables 'downstream' (.e. end pathway). sem list fitted models, effects first bootstrapped using bootEff() (may take !). Direct effects calculated fully standardised model coefficients response variable (see stdEff() details), indirect effects product direct effects operating along causal pathways SEM. total effects given predictor response sum direct () indirect effects. 'Mediator effects' also calculated, sum indirect paths operate individual mediator – useful assess relative importance different mediators affecting response. effect types can calculated automatically (default) specified subset predictors /mediators SEM. indirect, total, mediator effects directly bootstrapped using fitted models response variables (.e. via bootEff()), equivalent 'bootstrapped' estimates calculated instead using bootstrapped direct effect. Confidence intervals effects returned summary tables response (see bootCI()), BCa intervals calculated default using bootstrapped estimates effect type (Cheung, 2009; Hayes & Scharkow, 2013; MacKinnon et al., 2004). Effects confidence intervals contain zero highlighted star (.e. 'significant' ci.conf level). Bootstrap standard errors (standard deviations samples) biases (sample means minus original estimates) also included. Correlated errors (confidence intervals) also returned bootstrapped values present sem, specified argument cor.err part \"psem\" object (see bootEff()). represent residual relationships among response variables, unaccounted hypothesised SEM paths. Use summary() effect summary tables print() return table variable names associated details. calculated effects bootstrapped effects also returned lists response variable, except mediator effects also including model intercept(s) – required prediction (zero ordinary linear models fully standardised effects). Effects can conveniently extracted getEff() related functions.","code":""},{"path":"https://murphymv.github.io/semEff/reference/semEff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SEM Effects — semEff","text":"Cheung, M. W. L. (2009). Comparison methods constructing confidence intervals standardized indirect effects. Behavior Research Methods, 41(2), 425-438. doi:10/fnx7xk Hayes, . F., & Scharkow, M. (2013). Relative Trustworthiness Inferential Tests Indirect Effect Statistical Mediation Analysis: Method Really Matter? Psychological Science, 24(10), 1918-1927. doi:10/bbhr Lefcheck, J. S. (2016). piecewiseSEM: Piecewise structural equation modelling R ecology, evolution, systematics. Methods Ecology Evolution, 7(5), 573-579. doi:10/f8s8rb MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence Limits Indirect Effect: Distribution Product Resampling Methods. Multivariate Behavioral Research, 39(1), 99. doi:10/chqcnx Shipley, B. (2000). New Inferential Test Path Models Based Directed Acyclic Graphs. Structural Equation Modeling: Multidisciplinary Journal, 7(2), 206-218. doi:10/cqm32d Shipley, B. (2009). Confirmatory path analysis generalized multilevel context. Ecology, 90(2), 363-368. doi:10/bqd43d","code":""},{"path":"https://murphymv.github.io/semEff/reference/semEff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SEM Effects — semEff","text":"","code":"# SEM effects (shipley.sem.eff <- semEff(shipley.sem.boot)) #>  #> Piecewise SEM with: #>   * 1 exogenous vs. 4 endogenous variable(s) #>   * 4 direct vs. 6 indirect effect(s) #>  #> Variables: #>           Category   Predictor Mediator Response   Dir. Eff. Ind. Eff.   #>           --------   --------- -------- --------   --------- ---------   #>  lat    | Exog.    |     x        -        -     |         -         - | #>  DD     | Endog.   |     x        x        x     |         1         0 | #>  Date   | Endog.   |     x        x        x     |         1         1 | #>  Growth | Endog.   |     x        x        x     |         1         2 | #>  Live   | Endog.   |     -        -        x     |         1         3 | #>  #> Use summary() for effects and confidence intervals for endogenous variables. #> See ?getEff() for extracting (unformatted) effects. summary(shipley.sem.eff) #>  #> SEM direct, summed indirect, total, and mediator effects: #>  #> Response 'DD' (1/4): #>                   Effect    Bias   Std. Err.   Lower CI Upper CI     #>                   ------   -----   ---------   -------- --------     #>  DIRECT:    lat | -0.688 | 0.026 |     0.101 |   -0.828   -0.459 | * #>                 |        |       |           |                   |   #>  INDIRECT:  -   |      - |     - |         - |        -        - |   #>                 |        |       |           |                   |   #>  TOTAL:     lat | -0.688 | 0.026 |     0.101 |   -0.828   -0.459 | * #>                 |        |       |           |                   |   #>  MEDIATORS: -   |      - |     - |         - |        -        - |   #>  #>  #> Response 'Date' (2/4): #>                   Effect     Bias   Std. Err.   Lower CI Upper CI     #>                   ------   ------   ---------   -------- --------     #>  DIRECT:    DD  | -0.628 |  0.000 |     0.057 |   -0.741   -0.519 | * #>                 |        |        |           |                   |   #>  INDIRECT:  lat |  0.432 | -0.012 |     0.089 |    0.239    0.580 | * #>                 |        |        |           |                   |   #>  TOTAL:     lat |  0.432 | -0.012 |     0.089 |    0.239    0.580 | * #>             DD  | -0.628 |  0.000 |     0.057 |   -0.741   -0.519 | * #>                 |        |        |           |                   |   #>  MEDIATORS: DD  |  0.432 | -0.012 |     0.089 |    0.239    0.580 | * #>  #>  #> Response 'Growth' (3/4): #>                    Effect     Bias   Std. Err.   Lower CI Upper CI     #>                    ------   ------   ---------   -------- --------     #>  DIRECT:    Date |  0.382 |  0.011 |     0.058 |    0.293    0.515 | * #>                  |        |        |           |                   |   #>  INDIRECT:  lat  |  0.165 |  0.001 |     0.048 |    0.086    0.281 | * #>             DD   | -0.240 | -0.007 |     0.042 |   -0.344   -0.181 | * #>                  |        |        |           |                   |   #>  TOTAL:     lat  |  0.165 |  0.001 |     0.048 |    0.086    0.281 | * #>             DD   | -0.240 | -0.007 |     0.042 |   -0.344   -0.181 | * #>             Date |  0.382 |  0.011 |     0.058 |    0.293    0.515 | * #>                  |        |        |           |                   |   #>  MEDIATORS: DD   |  0.165 |  0.001 |     0.048 |    0.086    0.281 | * #>             Date | -0.075 | -0.006 |     0.017 |   -0.109   -0.049 | * #>  #>  #> Response 'Live' (4/4): #>                      Effect     Bias   Std. Err.   Lower CI Upper CI     #>                      ------   ------   ---------   -------- --------     #>  DIRECT:    Growth |  0.368 |  0.151 |     0.130 |    0.246    0.411 | * #>                    |        |        |           |                   |   #>  INDIRECT:  lat    |  0.061 |  0.025 |     0.032 |    0.007    0.095 | * #>             DD     | -0.088 | -0.039 |     0.037 |   -0.106   -0.055 | * #>             Date   |  0.141 |  0.063 |     0.059 |    0.093    0.163 | * #>                    |        |        |           |                   |   #>  TOTAL:     lat    |  0.061 |  0.025 |     0.032 |    0.007    0.095 | * #>             DD     | -0.088 | -0.039 |     0.037 |   -0.106   -0.055 | * #>             Date   |  0.141 |  0.063 |     0.059 |    0.093    0.163 | * #>             Growth |  0.368 |  0.151 |     0.130 |    0.246    0.411 | * #>                    |        |        |           |                   |   #>  MEDIATORS: DD     |  0.061 |  0.025 |     0.032 |    0.007    0.095 | * #>             Date   | -0.028 | -0.014 |     0.014 |   -0.033   -0.011 | * #>             Growth |  0.113 |  0.049 |     0.051 |    0.051    0.142 | * #>   # Effects for selected variables summary(shipley.sem.eff, response = \"Live\") #>  #> SEM direct, summed indirect, total, and mediator effects: #>  #> Response 'Live' (4/4): #>                      Effect     Bias   Std. Err.   Lower CI Upper CI     #>                      ------   ------   ---------   -------- --------     #>  DIRECT:    Growth |  0.368 |  0.151 |     0.130 |    0.246    0.411 | * #>                    |        |        |           |                   |   #>  INDIRECT:  lat    |  0.061 |  0.025 |     0.032 |    0.007    0.095 | * #>             DD     | -0.088 | -0.039 |     0.037 |   -0.106   -0.055 | * #>             Date   |  0.141 |  0.063 |     0.059 |    0.093    0.163 | * #>                    |        |        |           |                   |   #>  TOTAL:     lat    |  0.061 |  0.025 |     0.032 |    0.007    0.095 | * #>             DD     | -0.088 | -0.039 |     0.037 |   -0.106   -0.055 | * #>             Date   |  0.141 |  0.063 |     0.059 |    0.093    0.163 | * #>             Growth |  0.368 |  0.151 |     0.130 |    0.246    0.411 | * #>                    |        |        |           |                   |   #>  MEDIATORS: DD     |  0.061 |  0.025 |     0.032 |    0.007    0.095 | * #>             Date   | -0.028 | -0.014 |     0.014 |   -0.033   -0.011 | * #>             Growth |  0.113 |  0.049 |     0.051 |    0.051    0.142 | * #>  # summary(semEff(shipley.sem.boot, predictor = \"lat\")) # summary(semEff(shipley.sem.boot, mediator = \"DD\"))  # Effects calculated using original SEM (models) # (not typically recommended – better to use saved boot objects) # system.time( #  shipley.sem.eff <- semEff(shipley.sem, R = 1000, seed = 13, #                            ran.eff = \"site\") # )"},{"path":"https://murphymv.github.io/semEff/reference/shipley.growth.html","id":null,"dir":"Reference","previous_headings":"","what":"Candidate Model Set from Shipley 'Growth' Model — shipley.growth","title":"Candidate Model Set from Shipley 'Growth' Model — shipley.growth","text":"set hypothetical competing models fit response variable ('Growth') using simulated data Shipley (2009), model estimates can compared /averaged.","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.growth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Candidate Model Set from Shipley 'Growth' Model — shipley.growth","text":"","code":"shipley.growth"},{"path":"https://murphymv.github.io/semEff/reference/shipley.growth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Candidate Model Set from Shipley 'Growth' Model — shipley.growth","text":"list mixed models class \"lmer\" \"glmer\", fit response variable.","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.growth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Candidate Model Set from Shipley 'Growth' Model — shipley.growth","text":"Shipley, B. (2009). Confirmatory path analysis generalized multilevel context. Ecology, 90(2), 363-368. doi:10/bqd43d","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.growth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Candidate Model Set from Shipley 'Growth' Model — shipley.growth","text":"","code":"# Specification # shipley.growth <- list( #   lme4::lmer(Growth ~ Date + (1 | site) + (1 | tree), data = shipley), #   lme4::lmer(Growth ~ Date + DD + (1 | site) + (1 | tree), data = shipley), #   lme4::lmer(Growth ~ Date + DD + lat + (1 | site) + (1 | tree), #              data = shipley) # )"},{"path":"https://murphymv.github.io/semEff/reference/shipley.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Data from Shipley (2009) — shipley","title":"Simulated Data from Shipley (2009) — shipley","text":"Simulated Data Shipley (2009)","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Data from Shipley (2009) — shipley","text":"","code":"shipley"},{"path":"https://murphymv.github.io/semEff/reference/shipley.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Data from Shipley (2009) — shipley","text":"data frame 1900 observations 9 variables: site numeric code giving site observation comes tree numeric code giving tree observation comes lat latitude site year year observation taken Date Julian date bud burst occurs DD number degree days bud burst occurs Growth increase diameter growth tree Survival probability survival next year (used simulation) Live binary value (1 = tree lived following winter, 0 = tree died following winter)","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Data from Shipley (2009) — shipley","text":"doi:10/c886","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated Data from Shipley (2009) — shipley","text":"Shipley, B. (2009). Confirmatory path analysis generalized multilevel context. Ecology, 90(2), 363-368. doi:10/bqd43d","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapped Estimates for Shipley SEM — shipley.sem.boot","title":"Bootstrapped Estimates for Shipley SEM — shipley.sem.boot","text":"Bootstrapped estimates generated hypothesised SEM Shipley (2009), using bootEff().","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapped Estimates for Shipley SEM — shipley.sem.boot","text":"","code":"shipley.sem.boot"},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.boot.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bootstrapped Estimates for Shipley SEM — shipley.sem.boot","text":"list objects class \"boot\", representing bootstrapped estimates fitted mixed models.","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.boot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrapped Estimates for Shipley SEM — shipley.sem.boot","text":"Shipley, B. (2009). Confirmatory path analysis generalized multilevel context. Ecology, 90(2), 363-368. doi:10/bqd43d","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapped Estimates for Shipley SEM — shipley.sem.boot","text":"","code":"# Specification # shipley.sem.boot <- bootEff(shipley.sem, R = 1000, seed = 13, #                             ran.eff = \"site\")"},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Effects for Shipley SEM — shipley.sem.eff","title":"Effects for Shipley SEM — shipley.sem.eff","text":"SEM effects calculated bootstrapped estimates hypothesised SEM Shipley (2009), using semEff().","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effects for Shipley SEM — shipley.sem.eff","text":"","code":"shipley.sem.eff"},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.eff.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Effects for Shipley SEM — shipley.sem.eff","text":"list object class \"semEff\", containing SEM effects summary tables.","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.eff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Effects for Shipley SEM — shipley.sem.eff","text":"Shipley, B. (2009). Confirmatory path analysis generalized multilevel context. Ecology, 90(2), 363-368. doi:10/bqd43d","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.eff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Effects for Shipley SEM — shipley.sem.eff","text":"","code":"# Specification # shipley.sem.eff <- semEff(shipley.sem.boot)"},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypothesised SEM from Shipley (2009) — shipley.sem","title":"Hypothesised SEM from Shipley (2009) — shipley.sem","text":"Hypothesised SEM Shipley (2009)","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypothesised SEM from Shipley (2009) — shipley.sem","text":"","code":"shipley.sem"},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hypothesised SEM from Shipley (2009) — shipley.sem","text":"list fitted mixed models class \"lmer\" \"glmer\", representing structured equations.","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hypothesised SEM from Shipley (2009) — shipley.sem","text":"Shipley, B. (2009). Confirmatory path analysis generalized multilevel context. Ecology, 90(2), 363-368. doi:10/bqd43d","code":""},{"path":"https://murphymv.github.io/semEff/reference/shipley.sem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hypothesised SEM from Shipley (2009) — shipley.sem","text":"","code":"# Specification # shipley.sem <- list( #   DD = lme4::lmer(DD ~ lat + (1 | site) + (1 | tree), data = shipley), #   Date = lme4::lmer(Date ~ DD + (1 | site) + (1 | tree), data = shipley), #   Growth = lme4::lmer(Growth ~ Date + (1 | site) + (1 | tree), #                       data = shipley), #   Live = lme4::glmer(Live ~ Growth + (1 | site) + (1 | tree), binomial, #                      data = shipley) # )"},{"path":"https://murphymv.github.io/semEff/reference/stdEff.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardised Effects — stdEff","title":"Standardised Effects — stdEff","text":"Calculate fully standardised effects (model coefficients) standard deviation units, adjusted multicollinearity.","code":""},{"path":"https://murphymv.github.io/semEff/reference/stdEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardised Effects — stdEff","text":"","code":"stdEff(   mod,   weights = NULL,   data = NULL,   term.names = NULL,   unique.eff = TRUE,   cen.x = TRUE,   cen.y = TRUE,   std.x = TRUE,   std.y = TRUE,   refit.x = TRUE,   incl.raw = FALSE,   R.squared = FALSE,   R2.arg = NULL,   env = NULL )"},{"path":"https://murphymv.github.io/semEff/reference/stdEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardised Effects — stdEff","text":"mod fitted model object, list nested list objects. weights optional numeric vector weights use model averaging, named list vectors. former supplied mod list, latter nested list (matching list names). set \"equal\", simple average calculated instead. data optional dataset, used first refit model(s). term.names optional vector names used extract /sort effects output. unique.eff Logical, whether unique effects calculated (adjusted multicollinearity among predictors). cen.x, cen.y Logical, whether effects calculated mean-centred variables. std.x, std.y Logical, whether effects scaled standard deviations variables. refit.x Logical, whether model refit mean-centred predictor variables (see Details). incl.raw Logical, whether append raw (unstandardised) effects output. R.squared Logical, whether R-squared values also calculated (via R2()). R2.arg named list additional arguments R2() (applicable), excepting argument env. Ignored R.squared = FALSE. env Environment look model data (none supplied). Defaults formula() environment.","code":""},{"path":"https://murphymv.github.io/semEff/reference/stdEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardised Effects — stdEff","text":"numeric vector standardised effects, list nested list vectors.","code":""},{"path":"https://murphymv.github.io/semEff/reference/stdEff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardised Effects — stdEff","text":"stdEff() calculate fully standardised effects (coefficients) standard deviation units fitted model list models. achieves via adjusting 'raw' model coefficients, standardisation input variables required beforehand. Users can simply specify model variables original units function rest. However, user free scale /centre input variables choose, affect outcome standardisation (provided scaling standard deviations). may desirable cases, increase numerical stability model fitting variables widely different scales. arguments cen.x cen.y TRUE, effects calculated predictors (x) /response variable (y) mean-centred prior model-fitting (including dummy variables arising categorical predictors). Thus, ordinary linear model centring x y specified, intercept zero – mean (weighted mean) y. addition, cen.x = TRUE interacting terms model, effects lower order terms interaction adjusted using expression ensures main effect lower order term estimated mean values terms interact (zero 'centred' model) – typically improving interpretation effects. expression used comprises weighted sum effects contain lower order term, weight term zero 'containing' terms product means variables involved term (.e. lower order term ). example, three-way interaction (x1 * x2 * x3), expression main effect \\(\\beta1\\) : $$\\beta_{1} + \\beta_{12}\\bar{x}_{2} + \\beta_{13}\\bar{x}_{3} +   \\beta_{123}\\bar{x}_{2}\\bar{x}_{3}$$ (adapted ) addition, std.x = TRUE unique.eff = TRUE (see ), product terms interactive effects recalculated using mean-centred variables, ensure standard deviations variance inflation factors (VIF) predictors calculated correctly (model must refit latter purpose, recalculate variance-covariance matrix). std.x = TRUE, effects scaled multiplying standard deviations predictor variables (terms), std.y = TRUE divided standard deviation response variable (minus offsets). model GLM, latter calculated using link-transformed response (estimate ) generated using function glt(). arguments true, effects regarded 'fully' standardised traditional sense, often referred 'betas'. unique.eff = TRUE (default), effects adjusted multicollinearity among predictors dividing square root VIFs (Dudgeon, 2016; Thompson et al., 2017; RVIF()). also scaled standard deviations x y, converts semipartial correlations, .e. correlation unique components predictors (residualised predictors) response variable. measure effect size arguably much interpretable useful traditional standardised coefficient, always represents unique effects predictors can readily compared within across models. Values range zero +/- one rather +/- infinity (case betas) – putting scale bivariate correlation predictor response. case GLMs however, measure analogous exactly equal semipartial correlation, values may always bound +/- one (cases likely rare). Importantly, ordinary linear models, square semipartial correlation equals increase R-squared variable included last model – directly linking measure unique variance explained. See additional arguments favour use semipartial correlations. refit.x, cen.x, unique.eff TRUE interaction terms model, model refit (newly-)centred continuous predictors, order calculate correct VIFs variance-covariance matrix. However, refitting may necessary circumstances, example predictors already mean-centred, whose values subsequently resampled (e.g. parametric bootstrap). Setting refit.x = FALSE cases save time, especially larger/complex models /bootstrap runs. incl.raw = TRUE, raw (unstandardised) effects can also appended, .e. centring scaling options set FALSE (though still adjusted multicollinearity, applicable). may interest cases, example compare bootstrapped distributions standardised effects. R.squared = TRUE, model R-squared values appended effects via R2() function, additional arguments passed via R2.arg. Finally, weights specified, function calculates weighted average standardised effects across set (sets) different candidate models particular response variable(s) (Burnham & Anderson, 2002), via avgEst() function.","code":""},{"path":"https://murphymv.github.io/semEff/reference/stdEff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardised Effects — stdEff","text":"Burnham, K. P., & Anderson, D. R. (2002). Model Selection Multimodel Inference: Practical Information-Theoretic Approach (2nd ed.). Springer-Verlag. https://link.springer.com/book/10.1007/b97636 Dudgeon, P. (2016). Comparative Investigation Confidence Intervals Independent Variables Linear Regression. Multivariate Behavioral Research, 51(2-3), 139-153. doi:10/gfww3f Thompson, C. G., Kim, R. S., Aloe, . M., & Becker, B. J. (2017). Extracting Variance Inflation Factor Multicollinearity Diagnostics Typical Regression Results. Basic Applied Social Psychology, 39(2), 81-90. doi:10/gfww2w","code":""},{"path":"https://murphymv.github.io/semEff/reference/stdEff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardised Effects — stdEff","text":"","code":"library(lme4) #> Loading required package: Matrix #>  #> Attaching package: ‘lme4’ #> The following object is masked from ‘package:semEff’: #>  #>     getData  # Standardised (direct) effects for SEM m <- shipley.sem stdEff(m) #> $DD #> (Intercept)         lat  #> -0.05600661 -0.68772025  #>  #> $Date #> (Intercept)          DD  #> -0.01493651 -0.62813666  #>  #> $Growth #> (Intercept)        Date  #>  -0.2917507   0.3824224  #>  #> $Live #> (Intercept)      Growth  #>   0.3105220   0.3681961  #>  stdEff(m, cen.y = FALSE, std.y = FALSE)  # x-only #> $DD #> (Intercept)         lat  #>  143.183138   -7.066909  #>  #> $Date #> (Intercept)          DD  #>   126.79703    -5.11375  #>  #> $Growth #> (Intercept)        Date  #>   48.955514    2.448161  #>  #> $Live #> (Intercept)      Growth  #>    5.452982    2.226862  #>  stdEff(m, std.x = FALSE, std.y = FALSE)  # centred only #> $DD #> (Intercept)         lat  #>  -0.5755154  -0.8354729  #>  #> $Date #> (Intercept)          DD  #>  -0.1216002  -0.4976475  #>  #> $Growth #> (Intercept)        Date  #>  -1.8677067   0.3007147  #>  #> $Live #> (Intercept)      Growth  #>   1.8780467   0.3478536  #>  stdEff(m, cen.x = FALSE, cen.y = FALSE)  # scaled only #> $DD #> (Intercept)         lat  #>  19.1373370  -0.6877202  #>  #> $Date #> (Intercept)          DD  #>  24.3624481  -0.6281367  #>  #> $Growth #> (Intercept)        Date  #>   1.6853620   0.3824224  #>  #> $Live #> (Intercept)      Growth  #>  -2.0214940   0.3681961  #>  stdEff(m, unique.eff = FALSE)  # include multicollinearity #> $DD #> (Intercept)         lat  #> -0.05600661 -0.68772025  #>  #> $Date #> (Intercept)          DD  #> -0.01493651 -0.62813666  #>  #> $Growth #> (Intercept)        Date  #>  -0.2917507   0.3824224  #>  #> $Live #> (Intercept)      Growth  #>   0.3105220   0.3681961  #>  stdEff(m, R.squared = TRUE)  # add R-squared #> $DD #>      (Intercept)              lat      (R.squared)  (R.squared.adj)  #>      -0.05600661      -0.68772025       0.70800826       0.70747906  #> (R.squared.pred)  #>       0.68356361  #>  #> $Date #>      (Intercept)               DD      (R.squared)  (R.squared.adj)  #>      -0.01493651      -0.62813666       0.98555565       0.98553510  #> (R.squared.pred)  #>       0.98202414  #>  #> $Growth #>      (Intercept)             Date      (R.squared)  (R.squared.adj)  #>       -0.2917507        0.3824224        0.7938367        0.7934879  #> (R.squared.pred)  #>        0.7552854  #>  #> $Live #>      (Intercept)           Growth      (R.squared)  (R.squared.adj)  #>        0.3105220        0.3681961        0.2668652        0.2655971  #> (R.squared.pred)  #>               NA  #>  stdEff(m, incl.raw = TRUE)  # add unstandardised #> $DD #>       (Intercept)               lat (raw)_(Intercept)         (raw)_lat  #>       -0.05600661       -0.68772025      196.65237838       -0.83547294  #>  #> $Date #>       (Intercept)                DD (raw)_(Intercept)          (raw)_DD  #>       -0.01493651       -0.62813666      198.33816379       -0.49764747  #>  #> $Growth #>       (Intercept)              Date (raw)_(Intercept)        (raw)_Date  #>        -0.2917507         0.3824224        10.7892162         0.3007147  #>  #> $Live #>       (Intercept)            Growth (raw)_(Intercept)      (raw)_Growth  #>         0.3105220         0.3681961       -12.2260588         0.3478536  #>   # Demonstrate equality with effects from manually-standardised variables # (gaussian models only) m <- shipley.growth[[3]] d <- data.frame(scale(na.omit(shipley))) e1 <- stdEff(m, unique.eff = FALSE) e2 <- coef(summary(update(m, data = d)))[, 1] stopifnot(all.equal(e1, e2))  # Demonstrate equality with square root of increment in R-squared # (ordinary linear models only) m <- lm(Growth ~ Date + DD + lat, data = shipley) r2 <- summary(m)$r.squared e1 <- stdEff(m)[-1] en <- names(e1) e2 <- sapply(en, function(i) {   f <- reformulate(en[!en %in% i])   r2i <- summary(update(m, f))$r.squared   sqrt(r2 - r2i) }) stopifnot(all.equal(e1, e2))  # Model-averaged standardised effects m <- shipley.growth  # candidate models w <- runif(length(m), 0, 1)  # weights stdEff(m, w) #>  (Intercept)           DD         Date          lat  #> -0.294231350 -0.003638724  0.248803366 -0.039021926"},{"path":"https://murphymv.github.io/semEff/reference/summary.semEff.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise SEM Effects — summary.semEff","title":"Summarise SEM Effects — summary.semEff","text":"summary() method object class \"semEff\".","code":""},{"path":"https://murphymv.github.io/semEff/reference/summary.semEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise SEM Effects — summary.semEff","text":"","code":"# S3 method for class 'semEff' summary(object, responses = NULL, ...)"},{"path":"https://murphymv.github.io/semEff/reference/summary.semEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise SEM Effects — summary.semEff","text":"object object class \"semEff\". responses optional character vector, names one SEM response variables return summaries (/\"Correlated Errors\", applicable). Can also numeric vector indices object. NULL (default), summaries returned. ... arguments passed methods. currently used.","code":""},{"path":"https://murphymv.github.io/semEff/reference/summary.semEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise SEM Effects — summary.semEff","text":"summary table tables effects endogenous variables (data frames).","code":""},{"path":"https://murphymv.github.io/semEff/reference/summary.semEff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise SEM Effects — summary.semEff","text":"summary method prints tables effects confidence intervals SEM endogenous (response) variables.","code":""},{"path":"https://murphymv.github.io/semEff/reference/varW.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Variance — varW","title":"Weighted Variance — varW","text":"Calculate weighted variance x.","code":""},{"path":"https://murphymv.github.io/semEff/reference/varW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Variance — varW","text":"","code":"varW(x, w = NULL, na.rm = FALSE)"},{"path":"https://murphymv.github.io/semEff/reference/varW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Variance — varW","text":"x numeric vector. w numeric vector weights length x. na.rm Logical, whether NAs x removed.","code":""},{"path":"https://murphymv.github.io/semEff/reference/varW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Variance — varW","text":"numeric value, weighted variance x.","code":""},{"path":"https://murphymv.github.io/semEff/reference/varW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted Variance — varW","text":"Calculate weighted variance x via weighted covariance matrix (cov.wt()). weights supplied, simple variance returned instead. weighted.mean(), NAs w handled specially return NA result.","code":""},{"path":[]},{"path":"https://murphymv.github.io/semEff/reference/varW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Variance — varW","text":"","code":"# Weighted variance x <- rnorm(30) w <- runif(30, 0, 1) varW(x, w) #> [1] 0.9165465  # Simple variance varW(x) #> [1] 0.8397168 stopifnot(varW(x) == var(x))  # NA handling varW(c(x[1:29], NA), w, na.rm = TRUE)  # NA in x (removed) #> [1] 0.9325413 varW(c(x[1:29], NA), w, na.rm = FALSE)  # NA in x (NA returned) #> [1] NA varW(x[1:29], w = c(w[1:29], NA))  # NA in w (NA returned) #> [1] NA"},{"path":"https://murphymv.github.io/semEff/reference/xNam.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Model Term Names — xNam","title":"Get Model Term Names — xNam","text":"Extract term names fitted model object.","code":""},{"path":"https://murphymv.github.io/semEff/reference/xNam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Model Term Names — xNam","text":"","code":"xNam(mod, intercept = TRUE, aliased = TRUE, list = FALSE, env = NULL)"},{"path":"https://murphymv.github.io/semEff/reference/xNam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Model Term Names — xNam","text":"mod fitted model object, list nested list objects. intercept Logical, whether intercept included. aliased Logical, whether names aliased terms included (see Details). list Logical, whether names returned list, multi-coefficient terms grouped main term names. env Environment look model data (used construct model frame). Defaults formula() environment.","code":""},{"path":"https://murphymv.github.io/semEff/reference/xNam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Model Term Names — xNam","text":"character vector list/nested list term names.","code":""},{"path":"https://murphymv.github.io/semEff/reference/xNam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Model Term Names — xNam","text":"Extract term names fitted model. Names terms coefficients estimated also included aliased = TRUE (default). may terms perfectly correlated terms model, model design matrix rank deficient.","code":""},{"path":"https://murphymv.github.io/semEff/reference/xNam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Model Term Names — xNam","text":"","code":"# Term names from Shipley SEM m <- shipley.sem xNam(m) #> $DD #> [1] \"(Intercept)\" \"lat\"         #>  #> $Date #> [1] \"(Intercept)\" \"DD\"          #>  #> $Growth #> [1] \"(Intercept)\" \"Date\"        #>  #> $Live #> [1] \"(Intercept)\" \"Growth\"      #>  xNam(m, intercept = FALSE) #> $DD #> [1] \"lat\" #>  #> $Date #> [1] \"DD\" #>  #> $Growth #> [1] \"Date\" #>  #> $Live #> [1] \"Growth\" #>   # Model with different types of predictor (some multi-coefficient terms) d <- data.frame(   y = rnorm(100),   x1 = rnorm(100),   x2 = as.factor(rep(c(\"a\", \"b\", \"c\", \"d\"), each = 25)),   x3 = rep(1, 100) ) m <- lm(y ~ poly(x1, 2) + x2 + x3, data = d) xNam(m) #> [1] \"(Intercept)\"  \"poly(x1, 2)1\" \"poly(x1, 2)2\" \"x2b\"          \"x2c\"          #> [6] \"x2d\"          \"x3\"           xNam(m, aliased = FALSE)  # drop term that cannot be estimated (x3) #> [1] \"(Intercept)\"  \"poly(x1, 2)1\" \"poly(x1, 2)2\" \"x2b\"          \"x2c\"          #> [6] \"x2d\"          xNam(m, aliased = FALSE, list = TRUE)  # names as list #> $`(Intercept)` #> [1] \"(Intercept)\" #>  #> $`poly(x1, 2)` #> [1] \"poly(x1, 2)1\" \"poly(x1, 2)2\" #>  #> $x2 #> [1] \"x2b\" \"x2c\" \"x2d\" #>"},{"path":[]},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"new-features-0-7-2","dir":"Changelog","previous_headings":"","what":"New features:","title":"semEff 0.7.2","text":"New argument excl..med semEff(), allowing calculation indirect effects specific SEM pathways, .e. comprising user-specified mediators. New extractor functions (e.g. getEffTable()) returning unformatted tables effects confidence intervals.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"other-changes-0-7-2","dir":"Changelog","previous_headings":"","what":"Other changes:","title":"semEff 0.7.2","text":"Improvements print() summary() output \"semEff\" objects. New function getFamily() flexibly extract \"family\" object different model classes (mostly internal use). Minor improvements code documentation.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"bugfixes-0-7-2","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"semEff 0.7.2","text":"getData() incorrectly evaluated variable names objects supplied \"gls\" models, causing check variables data fail.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"semeff-061","dir":"Changelog","previous_headings":"","what":"semEff 0.6.1","title":"semEff 0.6.1","text":"22/08/2022","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"changes-0-6-1","dir":"Changelog","previous_headings":"","what":"Changes:","title":"semEff 0.6.1","text":"Minor updates code documentation (e.g. see #41).","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"bugfixes-0-6-1","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"semEff 0.6.1","text":"getX() threw error trying construct model design matrices using factors less two levels (contrasts can’t applied). error might occur e.g. dataset called model contained least one character/factor variable one unique value, incorrectly coerced factor getX() (typically order gain access individual dummy variables original design matrix). bootEff() failed name unnamed model lists names attribute character vector empty strings (rather NULL). names apparently generated piecewiseSEM::psem().","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"semeff-060","dir":"Changelog","previous_headings":"","what":"semEff 0.6.0","title":"semEff 0.6.0","text":"12/10/2021","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features:","title":"semEff 0.6.0","text":"New formatted table output effect summaries semEff() bootCI(), accessed via new print() summary() methods. Bootstrap standard errors bias (mean minus original estimate) now included effect summaries fitted values predEff(). Support \"psem\" objects (piecewiseSEM::psem()) bootEff()/semEff(). New package vignettes demonstrating examples.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"other-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Other changes:","title":"semEff 0.6.0","text":"calculated indirect effects (individual, summed) now also returned part \"semEff\" object (reference; include bootstrapped effects). Extract using getAllInd(). Unnamed model lists can now supplied bootEff()/semEff() (names generated automatically). Updates R2() (control negative values, new improved default method adjusted R-squared – Olkin-Pratt exact estimator). New function getX(), flexible construction model design matrices (mostly internal use). Removed … argument stdEff() – arguments R2() now passed named list R2.arg. Renamed extractor functions effects (e.g. dirEff() -> getDirEff()) added new ones. Various code documentation updates.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"bugfixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"semEff 0.6.0","text":"Amendment previous incomplete fix issue xNam() evaluating factor/character terms correctly. function now explicitly treats non-numeric predictor variables factors coerces necessary. also improved handling factor contrasts evaluating names. pSapply() work parallel = \"multicore\", due relying completely parallel::parSapply() parallel processing (\"snow\" ). function now wraps parallel::mcmapply() \"multicore\" (available Windows systems).","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"semeff-050","dir":"Changelog","previous_headings":"","what":"semEff 0.5.0","title":"semEff 0.5.0","text":"09/04/2021","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features:","title":"semEff 0.5.0","text":"R2() can now calculate R-squared based Spearman’s Rho. New function RVIF(), calculate ‘root variance inflation factors’ (square root VIFs).","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"other-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Other changes:","title":"semEff 0.5.0","text":"Renamed unique.x argument stdEff() unique.eff (old name temporarily allowed). Removed default value R argument bootEff(). number bootstrap resamples must now explicitly specified, probably better practice (10,000 often recommended confidence intervals). Added type argument bootEff(), specify type bootstrapping perform (mixed models). replaces ran.eff = \"crossed\", previously used indicate parametric bootstrapping (although ’s temporarily allowed). bootEff() now treat list containing mixed non-mixed models mixed (warning). Previously models treated non-mixed (unintentionally). presumably relatively rare scenario.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"bugfixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"semEff 0.5.0","text":"R2() calculate adjusted R-squared correctly beta regression models (.e. incorporate ‘phi’ parameter degrees freedom calculations). xNam() produced error attempting evaluate factor contrasts data, expecting character vectors factors (related change stringsAsFactors = FALSE default R 4.0.0, occurred cases regardless).","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"semeff-040","dir":"Changelog","previous_headings":"","what":"semEff 0.4.0","title":"semEff 0.4.0","text":"01/10/2020","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features:","title":"semEff 0.4.0","text":"Standardised vs raw effects: added incl.raw argument stdEff() (stdCoeff()), append raw effects (unstandardised coefficients) output. facilitates simultaneous bootstrapping sets effects, allowing raw effects used alternatively calculating (semEff(..., use.raw = TRUE)) predicting (predEff(..., use.raw = TRUE)) effects/CIs.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"other-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Other changes:","title":"semEff 0.4.0","text":"Renamed function stdCoeff() stdEff(), better reflect concept standardised model coefficients ‘effects’ (calling stdCoeff() still work – warning – next version least). Added offset argument getY() R2(), explicitly retain/remove offset (present) /response variable fitted values. Offsets removed default, ensures, example, standardised effects scaled appropriately. Added env argument multiple functions, explicitly specifying location data used fit models (necessary circumstances). replaces ... argument many instances, previously used pass environment eval() (via getData()). env (data) can also now passed (...) bootEff() predEff(). Added confidence interval attributes bootCI()/semEff() output (.e. confidence level, type). R2() longer calculates predictive R-squared GLMMs, interpretation hat matrix used calculations reliable (see https://rdrr.io/cran/lme4/man/hatvalues.merMod.html). Removed ability pass arguments getY() glt(), allowing controlled output getY(..., link = TRUE). Various minor updates function code documentation, improvement addition new internal helper functions.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"bugfixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"semEff 0.4.0","text":"bootEff() specified correlated errors failed mixed models class \"lmerModLmerTest\" (issue re-fitting models using update()). predEff() failed evaluate complex model terms (e.g. polynomials). stdEff() (stdCoeff()) re-fit model properly calculate correct VIFs fully ‘centred’ model (.e. account sufficiently complex terms polynomials transformations, mean-centring occur final step). xNam() generated incorrect term names categorical predictors certain circumstances (different contrast types, interactive effects ‘main’ effects). stdEff() (stdCoeff()) incorrectly calculated ‘centred’ intercept models offset specified. predEff() failed nested list models list numeric weights supplied (.e. model averaging scenario). stdEff() (stdCoeff()) return ‘phi’ parameter(s) beta regression models.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"semeff-030","dir":"Changelog","previous_headings":"","what":"semEff 0.3.0","title":"semEff 0.3.0","text":"25/03/2020","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features:","title":"semEff 0.3.0","text":"Support mixed models class \"lmerModLmerTest\". New function glt(), calculating ‘generalised’ link transformations non-gaussian variables.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"other-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Other changes:","title":"semEff 0.3.0","text":"Transfer functionality getY() glt(). Minor changes arguments bootEff() getY(). Added ability stdCoeff() use variables present model design matrix (e.g. ‘missing’ main effect interaction). Added ability pass boot object (bootEff()) effects argument predEff(). Added refit.x argument stdCoeff(), allowing control whether refit model centred predictors (correct VIFs). Various updates documentation.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"bugfixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"semEff 0.3.0","text":"xNam() generate correct term names categorical variables contrast types contr.treatment(). stdCoeff() correctly adjust multicollinearity model containing categorical variables centring specified (cen.x = TRUE). getY() failed generate estimated working response variable missing values (NA) supplied (functionality now glt()). predEff() failed models categorical variables (access dummy variables model matrix).","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"semeff-021","dir":"Changelog","previous_headings":"","what":"semEff 0.2.1","title":"semEff 0.2.1","text":"15/01/2020","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"bugfixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"semEff 0.2.1","text":"Function semEff() output effects properly.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"semeff-020","dir":"Changelog","previous_headings":"","what":"semEff 0.2.0","title":"semEff 0.2.0","text":"08/01/2020","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features:","title":"semEff 0.2.0","text":"Added support generalised least squares models (class \"gls\"). Added support beta regression models (class \"betareg\").","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"bugfixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bugfixes:","title":"semEff 0.2.0","text":"Function xNam() generate correct term names interactions involving multi-coefficient terms (e.g. factors). Function xNam() generate correct term names factors model intercept suppressed. Function R2() argument pred = TRUE threw error models weights = 0.","code":""},{"path":"https://murphymv.github.io/semEff/news/index.html","id":"semeff-010","dir":"Changelog","previous_headings":"","what":"semEff 0.1.0","title":"semEff 0.1.0","text":"04/11/2019 New package semEff, allowing automatic calculation effects ‘piecewise’ structural equation models.","code":""}]
